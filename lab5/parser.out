Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> struct
Rule 2     start -> start struct
Rule 3     block -> { block_interior }
Rule 4     struct -> expr ;
Rule 5     struct -> instruction ;
Rule 6     struct -> cond_expr
Rule 7     struct -> block
Rule 8     for_struct -> assignment ;
Rule 9     for_struct -> instruction ;
Rule 10    for_struct -> cond_expr
Rule 11    for_struct -> block
Rule 12    block_interior -> struct
Rule 13    block_interior -> block_interior struct
Rule 14    expr -> INTNUM
Rule 15    expr -> FLOATNUM
Rule 16    expr -> STRING
Rule 17    expr -> ZEROS ( expr )
Rule 18    expr -> ZEROS ( expr , expr )
Rule 19    expr -> ONES ( expr )
Rule 20    expr -> ONES ( expr , expr )
Rule 21    expr -> EYE ( expr )
Rule 22    expr -> EYE ( expr , expr )
Rule 23    expr -> lvalue
Rule 24    expr -> ( expr )
Rule 25    expr -> - expr
Rule 26    expr -> expr '
Rule 27    array_interior -> array_interior , expr
Rule 28    array_interior -> expr
Rule 29    range -> expr : expr
Rule 30    expr -> [ array_interior ]
Rule 31    expr -> [ ]
Rule 32    lvalue -> ID
Rule 33    lvalue -> ID [ array_interior ]
Rule 34    lvalue -> ID [ range ]
Rule 35    assignment -> lvalue = expr
Rule 36    assignment -> lvalue PLUSASSIGN expr
Rule 37    assignment -> lvalue MINASSIGN expr
Rule 38    assignment -> lvalue MULTASSIGN expr
Rule 39    assignment -> lvalue DIVASSIGN expr
Rule 40    expr -> assignment
Rule 41    expr -> expr + expr
Rule 42    expr -> expr - expr
Rule 43    expr -> expr * expr
Rule 44    expr -> expr / expr
Rule 45    expr -> expr MPLUS expr
Rule 46    expr -> expr MMINUS expr
Rule 47    expr -> expr MMLTP expr
Rule 48    expr -> expr MDIV expr
Rule 49    expr -> expr EQ expr
Rule 50    expr -> expr NEQ expr
Rule 51    expr -> expr GTEQ expr
Rule 52    expr -> expr LTEQ expr
Rule 53    expr -> expr > expr
Rule 54    expr -> expr < expr
Rule 55    cond_expr -> cond_if
Rule 56    cond_expr -> cond_while
Rule 57    cond_expr -> cond_for
Rule 58    cond_if -> IF ( expr ) struct
Rule 59    cond_if -> IF ( expr ) struct ELSE struct
Rule 60    cond_while -> WHILE ( expr ) struct
Rule 61    cond_for -> FOR lvalue = range for_struct
Rule 62    instruction -> RETURN expr
Rule 63    instruction -> PRINT array_interior
Rule 64    instruction -> BREAK
Rule 65    instruction -> CONTINUE

Terminals, with rules where they appear

'                    : 26
(                    : 17 18 19 20 21 22 24 58 59 60
)                    : 17 18 19 20 21 22 24 58 59 60
*                    : 43
+                    : 41
,                    : 18 20 22 27
-                    : 25 42
/                    : 44
:                    : 29
;                    : 4 5 8 9
<                    : 54
=                    : 35 61
>                    : 53
BREAK                : 64
CONTINUE             : 65
DIVASSIGN            : 39
ELSE                 : 59
EQ                   : 49
EYE                  : 21 22
FLOATNUM             : 15
FOR                  : 61
GTEQ                 : 51
ID                   : 32 33 34
IF                   : 58 59
INTNUM               : 14
LTEQ                 : 52
MDIV                 : 48
MINASSIGN            : 37
MMINUS               : 46
MMLTP                : 47
MPLUS                : 45
MULTASSIGN           : 38
NEQ                  : 50
ONES                 : 19 20
PLUSASSIGN           : 36
PRINT                : 63
RETURN               : 62
STRING               : 16
WHILE                : 60
ZEROS                : 17 18
[                    : 30 31 33 34
]                    : 30 31 33 34
error                : 
{                    : 3
}                    : 3

Nonterminals, with rules where they appear

array_interior       : 27 30 33 63
assignment           : 8 40
block                : 7 11
block_interior       : 3 13
cond_expr            : 6 10
cond_for             : 57
cond_if              : 55
cond_while           : 56
expr                 : 4 17 18 18 19 20 20 21 22 22 24 25 26 27 28 29 29 35 36 37 38 39 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 58 59 60 62
for_struct           : 61
instruction          : 5 9
lvalue               : 23 35 36 37 38 39 61
range                : 34 61
start                : 2 0
struct               : 1 2 12 13 58 59 59 60

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . struct
    (2) start -> . start struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    start                          shift and go to state 1
    struct                         shift and go to state 2
    expr                           shift and go to state 3
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 1

    (0) S' -> start .
    (2) start -> start . struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    struct                         shift and go to state 30
    expr                           shift and go to state 3
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 2

    (1) start -> struct .

    INTNUM          reduce using rule 1 (start -> struct .)
    FLOATNUM        reduce using rule 1 (start -> struct .)
    STRING          reduce using rule 1 (start -> struct .)
    ZEROS           reduce using rule 1 (start -> struct .)
    ONES            reduce using rule 1 (start -> struct .)
    EYE             reduce using rule 1 (start -> struct .)
    (               reduce using rule 1 (start -> struct .)
    -               reduce using rule 1 (start -> struct .)
    [               reduce using rule 1 (start -> struct .)
    RETURN          reduce using rule 1 (start -> struct .)
    PRINT           reduce using rule 1 (start -> struct .)
    BREAK           reduce using rule 1 (start -> struct .)
    CONTINUE        reduce using rule 1 (start -> struct .)
    {               reduce using rule 1 (start -> struct .)
    ID              reduce using rule 1 (start -> struct .)
    IF              reduce using rule 1 (start -> struct .)
    WHILE           reduce using rule 1 (start -> struct .)
    FOR             reduce using rule 1 (start -> struct .)
    $end            reduce using rule 1 (start -> struct .)


state 3

    (4) struct -> expr . ;
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               shift and go to state 31
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 4

    (5) struct -> instruction . ;

    ;               shift and go to state 47


state 5

    (6) struct -> cond_expr .

    INTNUM          reduce using rule 6 (struct -> cond_expr .)
    FLOATNUM        reduce using rule 6 (struct -> cond_expr .)
    STRING          reduce using rule 6 (struct -> cond_expr .)
    ZEROS           reduce using rule 6 (struct -> cond_expr .)
    ONES            reduce using rule 6 (struct -> cond_expr .)
    EYE             reduce using rule 6 (struct -> cond_expr .)
    (               reduce using rule 6 (struct -> cond_expr .)
    -               reduce using rule 6 (struct -> cond_expr .)
    [               reduce using rule 6 (struct -> cond_expr .)
    RETURN          reduce using rule 6 (struct -> cond_expr .)
    PRINT           reduce using rule 6 (struct -> cond_expr .)
    BREAK           reduce using rule 6 (struct -> cond_expr .)
    CONTINUE        reduce using rule 6 (struct -> cond_expr .)
    {               reduce using rule 6 (struct -> cond_expr .)
    ID              reduce using rule 6 (struct -> cond_expr .)
    IF              reduce using rule 6 (struct -> cond_expr .)
    WHILE           reduce using rule 6 (struct -> cond_expr .)
    FOR             reduce using rule 6 (struct -> cond_expr .)
    $end            reduce using rule 6 (struct -> cond_expr .)
    }               reduce using rule 6 (struct -> cond_expr .)
    ELSE            reduce using rule 6 (struct -> cond_expr .)


state 6

    (7) struct -> block .

    INTNUM          reduce using rule 7 (struct -> block .)
    FLOATNUM        reduce using rule 7 (struct -> block .)
    STRING          reduce using rule 7 (struct -> block .)
    ZEROS           reduce using rule 7 (struct -> block .)
    ONES            reduce using rule 7 (struct -> block .)
    EYE             reduce using rule 7 (struct -> block .)
    (               reduce using rule 7 (struct -> block .)
    -               reduce using rule 7 (struct -> block .)
    [               reduce using rule 7 (struct -> block .)
    RETURN          reduce using rule 7 (struct -> block .)
    PRINT           reduce using rule 7 (struct -> block .)
    BREAK           reduce using rule 7 (struct -> block .)
    CONTINUE        reduce using rule 7 (struct -> block .)
    {               reduce using rule 7 (struct -> block .)
    ID              reduce using rule 7 (struct -> block .)
    IF              reduce using rule 7 (struct -> block .)
    WHILE           reduce using rule 7 (struct -> block .)
    FOR             reduce using rule 7 (struct -> block .)
    $end            reduce using rule 7 (struct -> block .)
    }               reduce using rule 7 (struct -> block .)
    ELSE            reduce using rule 7 (struct -> block .)


state 7

    (14) expr -> INTNUM .

    ;               reduce using rule 14 (expr -> INTNUM .)
    '               reduce using rule 14 (expr -> INTNUM .)
    +               reduce using rule 14 (expr -> INTNUM .)
    -               reduce using rule 14 (expr -> INTNUM .)
    *               reduce using rule 14 (expr -> INTNUM .)
    /               reduce using rule 14 (expr -> INTNUM .)
    MPLUS           reduce using rule 14 (expr -> INTNUM .)
    MMINUS          reduce using rule 14 (expr -> INTNUM .)
    MMLTP           reduce using rule 14 (expr -> INTNUM .)
    MDIV            reduce using rule 14 (expr -> INTNUM .)
    EQ              reduce using rule 14 (expr -> INTNUM .)
    NEQ             reduce using rule 14 (expr -> INTNUM .)
    GTEQ            reduce using rule 14 (expr -> INTNUM .)
    LTEQ            reduce using rule 14 (expr -> INTNUM .)
    >               reduce using rule 14 (expr -> INTNUM .)
    <               reduce using rule 14 (expr -> INTNUM .)
    )               reduce using rule 14 (expr -> INTNUM .)
    ]               reduce using rule 14 (expr -> INTNUM .)
    ,               reduce using rule 14 (expr -> INTNUM .)
    :               reduce using rule 14 (expr -> INTNUM .)
    RETURN          reduce using rule 14 (expr -> INTNUM .)
    PRINT           reduce using rule 14 (expr -> INTNUM .)
    BREAK           reduce using rule 14 (expr -> INTNUM .)
    CONTINUE        reduce using rule 14 (expr -> INTNUM .)
    {               reduce using rule 14 (expr -> INTNUM .)
    ID              reduce using rule 14 (expr -> INTNUM .)
    IF              reduce using rule 14 (expr -> INTNUM .)
    WHILE           reduce using rule 14 (expr -> INTNUM .)
    FOR             reduce using rule 14 (expr -> INTNUM .)


state 8

    (15) expr -> FLOATNUM .

    ;               reduce using rule 15 (expr -> FLOATNUM .)
    '               reduce using rule 15 (expr -> FLOATNUM .)
    +               reduce using rule 15 (expr -> FLOATNUM .)
    -               reduce using rule 15 (expr -> FLOATNUM .)
    *               reduce using rule 15 (expr -> FLOATNUM .)
    /               reduce using rule 15 (expr -> FLOATNUM .)
    MPLUS           reduce using rule 15 (expr -> FLOATNUM .)
    MMINUS          reduce using rule 15 (expr -> FLOATNUM .)
    MMLTP           reduce using rule 15 (expr -> FLOATNUM .)
    MDIV            reduce using rule 15 (expr -> FLOATNUM .)
    EQ              reduce using rule 15 (expr -> FLOATNUM .)
    NEQ             reduce using rule 15 (expr -> FLOATNUM .)
    GTEQ            reduce using rule 15 (expr -> FLOATNUM .)
    LTEQ            reduce using rule 15 (expr -> FLOATNUM .)
    >               reduce using rule 15 (expr -> FLOATNUM .)
    <               reduce using rule 15 (expr -> FLOATNUM .)
    )               reduce using rule 15 (expr -> FLOATNUM .)
    ]               reduce using rule 15 (expr -> FLOATNUM .)
    ,               reduce using rule 15 (expr -> FLOATNUM .)
    :               reduce using rule 15 (expr -> FLOATNUM .)
    RETURN          reduce using rule 15 (expr -> FLOATNUM .)
    PRINT           reduce using rule 15 (expr -> FLOATNUM .)
    BREAK           reduce using rule 15 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 15 (expr -> FLOATNUM .)
    {               reduce using rule 15 (expr -> FLOATNUM .)
    ID              reduce using rule 15 (expr -> FLOATNUM .)
    IF              reduce using rule 15 (expr -> FLOATNUM .)
    WHILE           reduce using rule 15 (expr -> FLOATNUM .)
    FOR             reduce using rule 15 (expr -> FLOATNUM .)


state 9

    (16) expr -> STRING .

    ;               reduce using rule 16 (expr -> STRING .)
    '               reduce using rule 16 (expr -> STRING .)
    +               reduce using rule 16 (expr -> STRING .)
    -               reduce using rule 16 (expr -> STRING .)
    *               reduce using rule 16 (expr -> STRING .)
    /               reduce using rule 16 (expr -> STRING .)
    MPLUS           reduce using rule 16 (expr -> STRING .)
    MMINUS          reduce using rule 16 (expr -> STRING .)
    MMLTP           reduce using rule 16 (expr -> STRING .)
    MDIV            reduce using rule 16 (expr -> STRING .)
    EQ              reduce using rule 16 (expr -> STRING .)
    NEQ             reduce using rule 16 (expr -> STRING .)
    GTEQ            reduce using rule 16 (expr -> STRING .)
    LTEQ            reduce using rule 16 (expr -> STRING .)
    >               reduce using rule 16 (expr -> STRING .)
    <               reduce using rule 16 (expr -> STRING .)
    )               reduce using rule 16 (expr -> STRING .)
    ]               reduce using rule 16 (expr -> STRING .)
    ,               reduce using rule 16 (expr -> STRING .)
    :               reduce using rule 16 (expr -> STRING .)
    RETURN          reduce using rule 16 (expr -> STRING .)
    PRINT           reduce using rule 16 (expr -> STRING .)
    BREAK           reduce using rule 16 (expr -> STRING .)
    CONTINUE        reduce using rule 16 (expr -> STRING .)
    {               reduce using rule 16 (expr -> STRING .)
    ID              reduce using rule 16 (expr -> STRING .)
    IF              reduce using rule 16 (expr -> STRING .)
    WHILE           reduce using rule 16 (expr -> STRING .)
    FOR             reduce using rule 16 (expr -> STRING .)


state 10

    (17) expr -> ZEROS . ( expr )
    (18) expr -> ZEROS . ( expr , expr )

    (               shift and go to state 48


state 11

    (24) expr -> ( . expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 49
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 12

    (19) expr -> ONES . ( expr )
    (20) expr -> ONES . ( expr , expr )

    (               shift and go to state 50


state 13

    (21) expr -> EYE . ( expr )
    (22) expr -> EYE . ( expr , expr )

    (               shift and go to state 51


state 14

    (23) expr -> lvalue .
    (35) assignment -> lvalue . = expr
    (36) assignment -> lvalue . PLUSASSIGN expr
    (37) assignment -> lvalue . MINASSIGN expr
    (38) assignment -> lvalue . MULTASSIGN expr
    (39) assignment -> lvalue . DIVASSIGN expr

    ;               reduce using rule 23 (expr -> lvalue .)
    '               reduce using rule 23 (expr -> lvalue .)
    +               reduce using rule 23 (expr -> lvalue .)
    -               reduce using rule 23 (expr -> lvalue .)
    *               reduce using rule 23 (expr -> lvalue .)
    /               reduce using rule 23 (expr -> lvalue .)
    MPLUS           reduce using rule 23 (expr -> lvalue .)
    MMINUS          reduce using rule 23 (expr -> lvalue .)
    MMLTP           reduce using rule 23 (expr -> lvalue .)
    MDIV            reduce using rule 23 (expr -> lvalue .)
    EQ              reduce using rule 23 (expr -> lvalue .)
    NEQ             reduce using rule 23 (expr -> lvalue .)
    GTEQ            reduce using rule 23 (expr -> lvalue .)
    LTEQ            reduce using rule 23 (expr -> lvalue .)
    >               reduce using rule 23 (expr -> lvalue .)
    <               reduce using rule 23 (expr -> lvalue .)
    )               reduce using rule 23 (expr -> lvalue .)
    ]               reduce using rule 23 (expr -> lvalue .)
    ,               reduce using rule 23 (expr -> lvalue .)
    :               reduce using rule 23 (expr -> lvalue .)
    RETURN          reduce using rule 23 (expr -> lvalue .)
    PRINT           reduce using rule 23 (expr -> lvalue .)
    BREAK           reduce using rule 23 (expr -> lvalue .)
    CONTINUE        reduce using rule 23 (expr -> lvalue .)
    {               reduce using rule 23 (expr -> lvalue .)
    ID              reduce using rule 23 (expr -> lvalue .)
    IF              reduce using rule 23 (expr -> lvalue .)
    WHILE           reduce using rule 23 (expr -> lvalue .)
    FOR             reduce using rule 23 (expr -> lvalue .)
    =               shift and go to state 52
    PLUSASSIGN      shift and go to state 53
    MINASSIGN       shift and go to state 54
    MULTASSIGN      shift and go to state 55
    DIVASSIGN       shift and go to state 56


state 15

    (25) expr -> - . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 57
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 16

    (30) expr -> [ . array_interior ]
    (31) expr -> [ . ]
    (27) array_interior -> . array_interior , expr
    (28) array_interior -> . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    ]               shift and go to state 59
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    array_interior                 shift and go to state 58
    expr                           shift and go to state 60
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 17

    (40) expr -> assignment .

    ;               reduce using rule 40 (expr -> assignment .)
    '               reduce using rule 40 (expr -> assignment .)
    +               reduce using rule 40 (expr -> assignment .)
    -               reduce using rule 40 (expr -> assignment .)
    *               reduce using rule 40 (expr -> assignment .)
    /               reduce using rule 40 (expr -> assignment .)
    MPLUS           reduce using rule 40 (expr -> assignment .)
    MMINUS          reduce using rule 40 (expr -> assignment .)
    MMLTP           reduce using rule 40 (expr -> assignment .)
    MDIV            reduce using rule 40 (expr -> assignment .)
    EQ              reduce using rule 40 (expr -> assignment .)
    NEQ             reduce using rule 40 (expr -> assignment .)
    GTEQ            reduce using rule 40 (expr -> assignment .)
    LTEQ            reduce using rule 40 (expr -> assignment .)
    >               reduce using rule 40 (expr -> assignment .)
    <               reduce using rule 40 (expr -> assignment .)
    )               reduce using rule 40 (expr -> assignment .)
    ]               reduce using rule 40 (expr -> assignment .)
    ,               reduce using rule 40 (expr -> assignment .)
    :               reduce using rule 40 (expr -> assignment .)
    RETURN          reduce using rule 40 (expr -> assignment .)
    PRINT           reduce using rule 40 (expr -> assignment .)
    BREAK           reduce using rule 40 (expr -> assignment .)
    CONTINUE        reduce using rule 40 (expr -> assignment .)
    {               reduce using rule 40 (expr -> assignment .)
    ID              reduce using rule 40 (expr -> assignment .)
    IF              reduce using rule 40 (expr -> assignment .)
    WHILE           reduce using rule 40 (expr -> assignment .)
    FOR             reduce using rule 40 (expr -> assignment .)


state 18

    (62) instruction -> RETURN . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 61
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 19

    (63) instruction -> PRINT . array_interior
    (27) array_interior -> . array_interior , expr
    (28) array_interior -> . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    array_interior                 shift and go to state 62
    expr                           shift and go to state 60
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 20

    (64) instruction -> BREAK .

    ;               reduce using rule 64 (instruction -> BREAK .)


state 21

    (65) instruction -> CONTINUE .

    ;               reduce using rule 65 (instruction -> CONTINUE .)


state 22

    (55) cond_expr -> cond_if .

    INTNUM          reduce using rule 55 (cond_expr -> cond_if .)
    FLOATNUM        reduce using rule 55 (cond_expr -> cond_if .)
    STRING          reduce using rule 55 (cond_expr -> cond_if .)
    ZEROS           reduce using rule 55 (cond_expr -> cond_if .)
    ONES            reduce using rule 55 (cond_expr -> cond_if .)
    EYE             reduce using rule 55 (cond_expr -> cond_if .)
    (               reduce using rule 55 (cond_expr -> cond_if .)
    -               reduce using rule 55 (cond_expr -> cond_if .)
    [               reduce using rule 55 (cond_expr -> cond_if .)
    RETURN          reduce using rule 55 (cond_expr -> cond_if .)
    PRINT           reduce using rule 55 (cond_expr -> cond_if .)
    BREAK           reduce using rule 55 (cond_expr -> cond_if .)
    CONTINUE        reduce using rule 55 (cond_expr -> cond_if .)
    {               reduce using rule 55 (cond_expr -> cond_if .)
    ID              reduce using rule 55 (cond_expr -> cond_if .)
    IF              reduce using rule 55 (cond_expr -> cond_if .)
    WHILE           reduce using rule 55 (cond_expr -> cond_if .)
    FOR             reduce using rule 55 (cond_expr -> cond_if .)
    $end            reduce using rule 55 (cond_expr -> cond_if .)
    }               reduce using rule 55 (cond_expr -> cond_if .)
    ELSE            reduce using rule 55 (cond_expr -> cond_if .)


state 23

    (56) cond_expr -> cond_while .

    INTNUM          reduce using rule 56 (cond_expr -> cond_while .)
    FLOATNUM        reduce using rule 56 (cond_expr -> cond_while .)
    STRING          reduce using rule 56 (cond_expr -> cond_while .)
    ZEROS           reduce using rule 56 (cond_expr -> cond_while .)
    ONES            reduce using rule 56 (cond_expr -> cond_while .)
    EYE             reduce using rule 56 (cond_expr -> cond_while .)
    (               reduce using rule 56 (cond_expr -> cond_while .)
    -               reduce using rule 56 (cond_expr -> cond_while .)
    [               reduce using rule 56 (cond_expr -> cond_while .)
    RETURN          reduce using rule 56 (cond_expr -> cond_while .)
    PRINT           reduce using rule 56 (cond_expr -> cond_while .)
    BREAK           reduce using rule 56 (cond_expr -> cond_while .)
    CONTINUE        reduce using rule 56 (cond_expr -> cond_while .)
    {               reduce using rule 56 (cond_expr -> cond_while .)
    ID              reduce using rule 56 (cond_expr -> cond_while .)
    IF              reduce using rule 56 (cond_expr -> cond_while .)
    WHILE           reduce using rule 56 (cond_expr -> cond_while .)
    FOR             reduce using rule 56 (cond_expr -> cond_while .)
    $end            reduce using rule 56 (cond_expr -> cond_while .)
    }               reduce using rule 56 (cond_expr -> cond_while .)
    ELSE            reduce using rule 56 (cond_expr -> cond_while .)


state 24

    (57) cond_expr -> cond_for .

    INTNUM          reduce using rule 57 (cond_expr -> cond_for .)
    FLOATNUM        reduce using rule 57 (cond_expr -> cond_for .)
    STRING          reduce using rule 57 (cond_expr -> cond_for .)
    ZEROS           reduce using rule 57 (cond_expr -> cond_for .)
    ONES            reduce using rule 57 (cond_expr -> cond_for .)
    EYE             reduce using rule 57 (cond_expr -> cond_for .)
    (               reduce using rule 57 (cond_expr -> cond_for .)
    -               reduce using rule 57 (cond_expr -> cond_for .)
    [               reduce using rule 57 (cond_expr -> cond_for .)
    RETURN          reduce using rule 57 (cond_expr -> cond_for .)
    PRINT           reduce using rule 57 (cond_expr -> cond_for .)
    BREAK           reduce using rule 57 (cond_expr -> cond_for .)
    CONTINUE        reduce using rule 57 (cond_expr -> cond_for .)
    {               reduce using rule 57 (cond_expr -> cond_for .)
    ID              reduce using rule 57 (cond_expr -> cond_for .)
    IF              reduce using rule 57 (cond_expr -> cond_for .)
    WHILE           reduce using rule 57 (cond_expr -> cond_for .)
    FOR             reduce using rule 57 (cond_expr -> cond_for .)
    $end            reduce using rule 57 (cond_expr -> cond_for .)
    }               reduce using rule 57 (cond_expr -> cond_for .)
    ELSE            reduce using rule 57 (cond_expr -> cond_for .)


state 25

    (3) block -> { . block_interior }
    (12) block_interior -> . struct
    (13) block_interior -> . block_interior struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    block_interior                 shift and go to state 63
    struct                         shift and go to state 64
    expr                           shift and go to state 3
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 26

    (32) lvalue -> ID .
    (33) lvalue -> ID . [ array_interior ]
    (34) lvalue -> ID . [ range ]

    =               reduce using rule 32 (lvalue -> ID .)
    PLUSASSIGN      reduce using rule 32 (lvalue -> ID .)
    MINASSIGN       reduce using rule 32 (lvalue -> ID .)
    MULTASSIGN      reduce using rule 32 (lvalue -> ID .)
    DIVASSIGN       reduce using rule 32 (lvalue -> ID .)
    ;               reduce using rule 32 (lvalue -> ID .)
    '               reduce using rule 32 (lvalue -> ID .)
    +               reduce using rule 32 (lvalue -> ID .)
    -               reduce using rule 32 (lvalue -> ID .)
    *               reduce using rule 32 (lvalue -> ID .)
    /               reduce using rule 32 (lvalue -> ID .)
    MPLUS           reduce using rule 32 (lvalue -> ID .)
    MMINUS          reduce using rule 32 (lvalue -> ID .)
    MMLTP           reduce using rule 32 (lvalue -> ID .)
    MDIV            reduce using rule 32 (lvalue -> ID .)
    EQ              reduce using rule 32 (lvalue -> ID .)
    NEQ             reduce using rule 32 (lvalue -> ID .)
    GTEQ            reduce using rule 32 (lvalue -> ID .)
    LTEQ            reduce using rule 32 (lvalue -> ID .)
    >               reduce using rule 32 (lvalue -> ID .)
    <               reduce using rule 32 (lvalue -> ID .)
    )               reduce using rule 32 (lvalue -> ID .)
    ]               reduce using rule 32 (lvalue -> ID .)
    ,               reduce using rule 32 (lvalue -> ID .)
    :               reduce using rule 32 (lvalue -> ID .)
    RETURN          reduce using rule 32 (lvalue -> ID .)
    PRINT           reduce using rule 32 (lvalue -> ID .)
    BREAK           reduce using rule 32 (lvalue -> ID .)
    CONTINUE        reduce using rule 32 (lvalue -> ID .)
    {               reduce using rule 32 (lvalue -> ID .)
    ID              reduce using rule 32 (lvalue -> ID .)
    IF              reduce using rule 32 (lvalue -> ID .)
    WHILE           reduce using rule 32 (lvalue -> ID .)
    FOR             reduce using rule 32 (lvalue -> ID .)
    [               shift and go to state 65


state 27

    (58) cond_if -> IF . ( expr ) struct
    (59) cond_if -> IF . ( expr ) struct ELSE struct

    (               shift and go to state 66


state 28

    (60) cond_while -> WHILE . ( expr ) struct

    (               shift and go to state 67


state 29

    (61) cond_for -> FOR . lvalue = range for_struct
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]

    ID              shift and go to state 26

    lvalue                         shift and go to state 68

state 30

    (2) start -> start struct .

    INTNUM          reduce using rule 2 (start -> start struct .)
    FLOATNUM        reduce using rule 2 (start -> start struct .)
    STRING          reduce using rule 2 (start -> start struct .)
    ZEROS           reduce using rule 2 (start -> start struct .)
    ONES            reduce using rule 2 (start -> start struct .)
    EYE             reduce using rule 2 (start -> start struct .)
    (               reduce using rule 2 (start -> start struct .)
    -               reduce using rule 2 (start -> start struct .)
    [               reduce using rule 2 (start -> start struct .)
    RETURN          reduce using rule 2 (start -> start struct .)
    PRINT           reduce using rule 2 (start -> start struct .)
    BREAK           reduce using rule 2 (start -> start struct .)
    CONTINUE        reduce using rule 2 (start -> start struct .)
    {               reduce using rule 2 (start -> start struct .)
    ID              reduce using rule 2 (start -> start struct .)
    IF              reduce using rule 2 (start -> start struct .)
    WHILE           reduce using rule 2 (start -> start struct .)
    FOR             reduce using rule 2 (start -> start struct .)
    $end            reduce using rule 2 (start -> start struct .)


state 31

    (4) struct -> expr ; .

    INTNUM          reduce using rule 4 (struct -> expr ; .)
    FLOATNUM        reduce using rule 4 (struct -> expr ; .)
    STRING          reduce using rule 4 (struct -> expr ; .)
    ZEROS           reduce using rule 4 (struct -> expr ; .)
    ONES            reduce using rule 4 (struct -> expr ; .)
    EYE             reduce using rule 4 (struct -> expr ; .)
    (               reduce using rule 4 (struct -> expr ; .)
    -               reduce using rule 4 (struct -> expr ; .)
    [               reduce using rule 4 (struct -> expr ; .)
    RETURN          reduce using rule 4 (struct -> expr ; .)
    PRINT           reduce using rule 4 (struct -> expr ; .)
    BREAK           reduce using rule 4 (struct -> expr ; .)
    CONTINUE        reduce using rule 4 (struct -> expr ; .)
    {               reduce using rule 4 (struct -> expr ; .)
    ID              reduce using rule 4 (struct -> expr ; .)
    IF              reduce using rule 4 (struct -> expr ; .)
    WHILE           reduce using rule 4 (struct -> expr ; .)
    FOR             reduce using rule 4 (struct -> expr ; .)
    $end            reduce using rule 4 (struct -> expr ; .)
    }               reduce using rule 4 (struct -> expr ; .)
    ELSE            reduce using rule 4 (struct -> expr ; .)


state 32

    (26) expr -> expr ' .

    ;               reduce using rule 26 (expr -> expr ' .)
    '               reduce using rule 26 (expr -> expr ' .)
    +               reduce using rule 26 (expr -> expr ' .)
    -               reduce using rule 26 (expr -> expr ' .)
    *               reduce using rule 26 (expr -> expr ' .)
    /               reduce using rule 26 (expr -> expr ' .)
    MPLUS           reduce using rule 26 (expr -> expr ' .)
    MMINUS          reduce using rule 26 (expr -> expr ' .)
    MMLTP           reduce using rule 26 (expr -> expr ' .)
    MDIV            reduce using rule 26 (expr -> expr ' .)
    EQ              reduce using rule 26 (expr -> expr ' .)
    NEQ             reduce using rule 26 (expr -> expr ' .)
    GTEQ            reduce using rule 26 (expr -> expr ' .)
    LTEQ            reduce using rule 26 (expr -> expr ' .)
    >               reduce using rule 26 (expr -> expr ' .)
    <               reduce using rule 26 (expr -> expr ' .)
    )               reduce using rule 26 (expr -> expr ' .)
    ]               reduce using rule 26 (expr -> expr ' .)
    ,               reduce using rule 26 (expr -> expr ' .)
    :               reduce using rule 26 (expr -> expr ' .)
    RETURN          reduce using rule 26 (expr -> expr ' .)
    PRINT           reduce using rule 26 (expr -> expr ' .)
    BREAK           reduce using rule 26 (expr -> expr ' .)
    CONTINUE        reduce using rule 26 (expr -> expr ' .)
    {               reduce using rule 26 (expr -> expr ' .)
    ID              reduce using rule 26 (expr -> expr ' .)
    IF              reduce using rule 26 (expr -> expr ' .)
    WHILE           reduce using rule 26 (expr -> expr ' .)
    FOR             reduce using rule 26 (expr -> expr ' .)


state 33

    (41) expr -> expr + . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 69
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 34

    (42) expr -> expr - . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 70
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 35

    (43) expr -> expr * . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 71
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 36

    (44) expr -> expr / . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 72
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 37

    (45) expr -> expr MPLUS . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 73
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 38

    (46) expr -> expr MMINUS . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 74
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 39

    (47) expr -> expr MMLTP . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 75
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 40

    (48) expr -> expr MDIV . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 76
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 41

    (49) expr -> expr EQ . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 77
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 42

    (50) expr -> expr NEQ . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 78
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 43

    (51) expr -> expr GTEQ . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 79
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 44

    (52) expr -> expr LTEQ . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 80
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 45

    (53) expr -> expr > . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 81
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 46

    (54) expr -> expr < . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 82
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 47

    (5) struct -> instruction ; .

    INTNUM          reduce using rule 5 (struct -> instruction ; .)
    FLOATNUM        reduce using rule 5 (struct -> instruction ; .)
    STRING          reduce using rule 5 (struct -> instruction ; .)
    ZEROS           reduce using rule 5 (struct -> instruction ; .)
    ONES            reduce using rule 5 (struct -> instruction ; .)
    EYE             reduce using rule 5 (struct -> instruction ; .)
    (               reduce using rule 5 (struct -> instruction ; .)
    -               reduce using rule 5 (struct -> instruction ; .)
    [               reduce using rule 5 (struct -> instruction ; .)
    RETURN          reduce using rule 5 (struct -> instruction ; .)
    PRINT           reduce using rule 5 (struct -> instruction ; .)
    BREAK           reduce using rule 5 (struct -> instruction ; .)
    CONTINUE        reduce using rule 5 (struct -> instruction ; .)
    {               reduce using rule 5 (struct -> instruction ; .)
    ID              reduce using rule 5 (struct -> instruction ; .)
    IF              reduce using rule 5 (struct -> instruction ; .)
    WHILE           reduce using rule 5 (struct -> instruction ; .)
    FOR             reduce using rule 5 (struct -> instruction ; .)
    $end            reduce using rule 5 (struct -> instruction ; .)
    }               reduce using rule 5 (struct -> instruction ; .)
    ELSE            reduce using rule 5 (struct -> instruction ; .)


state 48

    (17) expr -> ZEROS ( . expr )
    (18) expr -> ZEROS ( . expr , expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 83
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 49

    (24) expr -> ( expr . )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 84
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 50

    (19) expr -> ONES ( . expr )
    (20) expr -> ONES ( . expr , expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 85
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 51

    (21) expr -> EYE ( . expr )
    (22) expr -> EYE ( . expr , expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 86
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 52

    (35) assignment -> lvalue = . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    lvalue                         shift and go to state 14
    expr                           shift and go to state 87
    assignment                     shift and go to state 17

state 53

    (36) assignment -> lvalue PLUSASSIGN . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    lvalue                         shift and go to state 14
    expr                           shift and go to state 88
    assignment                     shift and go to state 17

state 54

    (37) assignment -> lvalue MINASSIGN . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    lvalue                         shift and go to state 14
    expr                           shift and go to state 89
    assignment                     shift and go to state 17

state 55

    (38) assignment -> lvalue MULTASSIGN . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    lvalue                         shift and go to state 14
    expr                           shift and go to state 90
    assignment                     shift and go to state 17

state 56

    (39) assignment -> lvalue DIVASSIGN . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    lvalue                         shift and go to state 14
    expr                           shift and go to state 91
    assignment                     shift and go to state 17

state 57

    (25) expr -> - expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 25 (expr -> - expr .)
    +               reduce using rule 25 (expr -> - expr .)
    -               reduce using rule 25 (expr -> - expr .)
    *               reduce using rule 25 (expr -> - expr .)
    /               reduce using rule 25 (expr -> - expr .)
    MPLUS           reduce using rule 25 (expr -> - expr .)
    MMINUS          reduce using rule 25 (expr -> - expr .)
    MMLTP           reduce using rule 25 (expr -> - expr .)
    MDIV            reduce using rule 25 (expr -> - expr .)
    EQ              reduce using rule 25 (expr -> - expr .)
    NEQ             reduce using rule 25 (expr -> - expr .)
    GTEQ            reduce using rule 25 (expr -> - expr .)
    LTEQ            reduce using rule 25 (expr -> - expr .)
    >               reduce using rule 25 (expr -> - expr .)
    <               reduce using rule 25 (expr -> - expr .)
    )               reduce using rule 25 (expr -> - expr .)
    ]               reduce using rule 25 (expr -> - expr .)
    ,               reduce using rule 25 (expr -> - expr .)
    :               reduce using rule 25 (expr -> - expr .)
    RETURN          reduce using rule 25 (expr -> - expr .)
    PRINT           reduce using rule 25 (expr -> - expr .)
    BREAK           reduce using rule 25 (expr -> - expr .)
    CONTINUE        reduce using rule 25 (expr -> - expr .)
    {               reduce using rule 25 (expr -> - expr .)
    ID              reduce using rule 25 (expr -> - expr .)
    IF              reduce using rule 25 (expr -> - expr .)
    WHILE           reduce using rule 25 (expr -> - expr .)
    FOR             reduce using rule 25 (expr -> - expr .)
    '               shift and go to state 32

  ! '               [ reduce using rule 25 (expr -> - expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! MMLTP           [ shift and go to state 39 ]
  ! MDIV            [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 58

    (30) expr -> [ array_interior . ]
    (27) array_interior -> array_interior . , expr

    ]               shift and go to state 92
    ,               shift and go to state 93


state 59

    (31) expr -> [ ] .

    ;               reduce using rule 31 (expr -> [ ] .)
    '               reduce using rule 31 (expr -> [ ] .)
    +               reduce using rule 31 (expr -> [ ] .)
    -               reduce using rule 31 (expr -> [ ] .)
    *               reduce using rule 31 (expr -> [ ] .)
    /               reduce using rule 31 (expr -> [ ] .)
    MPLUS           reduce using rule 31 (expr -> [ ] .)
    MMINUS          reduce using rule 31 (expr -> [ ] .)
    MMLTP           reduce using rule 31 (expr -> [ ] .)
    MDIV            reduce using rule 31 (expr -> [ ] .)
    EQ              reduce using rule 31 (expr -> [ ] .)
    NEQ             reduce using rule 31 (expr -> [ ] .)
    GTEQ            reduce using rule 31 (expr -> [ ] .)
    LTEQ            reduce using rule 31 (expr -> [ ] .)
    >               reduce using rule 31 (expr -> [ ] .)
    <               reduce using rule 31 (expr -> [ ] .)
    )               reduce using rule 31 (expr -> [ ] .)
    ]               reduce using rule 31 (expr -> [ ] .)
    ,               reduce using rule 31 (expr -> [ ] .)
    :               reduce using rule 31 (expr -> [ ] .)
    RETURN          reduce using rule 31 (expr -> [ ] .)
    PRINT           reduce using rule 31 (expr -> [ ] .)
    BREAK           reduce using rule 31 (expr -> [ ] .)
    CONTINUE        reduce using rule 31 (expr -> [ ] .)
    {               reduce using rule 31 (expr -> [ ] .)
    ID              reduce using rule 31 (expr -> [ ] .)
    IF              reduce using rule 31 (expr -> [ ] .)
    WHILE           reduce using rule 31 (expr -> [ ] .)
    FOR             reduce using rule 31 (expr -> [ ] .)


state 60

    (28) array_interior -> expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ]               reduce using rule 28 (array_interior -> expr .)
    ,               reduce using rule 28 (array_interior -> expr .)
    ;               reduce using rule 28 (array_interior -> expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 61

    (62) instruction -> RETURN expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 62 (instruction -> RETURN expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 62

    (63) instruction -> PRINT array_interior .
    (27) array_interior -> array_interior . , expr

    ;               reduce using rule 63 (instruction -> PRINT array_interior .)
    ,               shift and go to state 93


state 63

    (3) block -> { block_interior . }
    (13) block_interior -> block_interior . struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    }               shift and go to state 94
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    struct                         shift and go to state 95
    expr                           shift and go to state 3
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 64

    (12) block_interior -> struct .

    }               reduce using rule 12 (block_interior -> struct .)
    INTNUM          reduce using rule 12 (block_interior -> struct .)
    FLOATNUM        reduce using rule 12 (block_interior -> struct .)
    STRING          reduce using rule 12 (block_interior -> struct .)
    ZEROS           reduce using rule 12 (block_interior -> struct .)
    ONES            reduce using rule 12 (block_interior -> struct .)
    EYE             reduce using rule 12 (block_interior -> struct .)
    (               reduce using rule 12 (block_interior -> struct .)
    -               reduce using rule 12 (block_interior -> struct .)
    [               reduce using rule 12 (block_interior -> struct .)
    RETURN          reduce using rule 12 (block_interior -> struct .)
    PRINT           reduce using rule 12 (block_interior -> struct .)
    BREAK           reduce using rule 12 (block_interior -> struct .)
    CONTINUE        reduce using rule 12 (block_interior -> struct .)
    {               reduce using rule 12 (block_interior -> struct .)
    ID              reduce using rule 12 (block_interior -> struct .)
    IF              reduce using rule 12 (block_interior -> struct .)
    WHILE           reduce using rule 12 (block_interior -> struct .)
    FOR             reduce using rule 12 (block_interior -> struct .)


state 65

    (33) lvalue -> ID [ . array_interior ]
    (34) lvalue -> ID [ . range ]
    (27) array_interior -> . array_interior , expr
    (28) array_interior -> . expr
    (29) range -> . expr : expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    array_interior                 shift and go to state 96
    range                          shift and go to state 97
    expr                           shift and go to state 98
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 66

    (58) cond_if -> IF ( . expr ) struct
    (59) cond_if -> IF ( . expr ) struct ELSE struct
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 99
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 67

    (60) cond_while -> WHILE ( . expr ) struct
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 100
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 68

    (61) cond_for -> FOR lvalue . = range for_struct

    =               shift and go to state 101


state 69

    (41) expr -> expr + expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 41 (expr -> expr + expr .)
    +               reduce using rule 41 (expr -> expr + expr .)
    -               reduce using rule 41 (expr -> expr + expr .)
    MPLUS           reduce using rule 41 (expr -> expr + expr .)
    MMINUS          reduce using rule 41 (expr -> expr + expr .)
    EQ              reduce using rule 41 (expr -> expr + expr .)
    NEQ             reduce using rule 41 (expr -> expr + expr .)
    GTEQ            reduce using rule 41 (expr -> expr + expr .)
    LTEQ            reduce using rule 41 (expr -> expr + expr .)
    >               reduce using rule 41 (expr -> expr + expr .)
    <               reduce using rule 41 (expr -> expr + expr .)
    )               reduce using rule 41 (expr -> expr + expr .)
    ]               reduce using rule 41 (expr -> expr + expr .)
    ,               reduce using rule 41 (expr -> expr + expr .)
    :               reduce using rule 41 (expr -> expr + expr .)
    RETURN          reduce using rule 41 (expr -> expr + expr .)
    PRINT           reduce using rule 41 (expr -> expr + expr .)
    BREAK           reduce using rule 41 (expr -> expr + expr .)
    CONTINUE        reduce using rule 41 (expr -> expr + expr .)
    {               reduce using rule 41 (expr -> expr + expr .)
    ID              reduce using rule 41 (expr -> expr + expr .)
    IF              reduce using rule 41 (expr -> expr + expr .)
    WHILE           reduce using rule 41 (expr -> expr + expr .)
    FOR             reduce using rule 41 (expr -> expr + expr .)
    '               shift and go to state 32
    *               shift and go to state 35
    /               shift and go to state 36
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 41 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 41 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 41 (expr -> expr + expr .) ]
  ! MMLTP           [ reduce using rule 41 (expr -> expr + expr .) ]
  ! MDIV            [ reduce using rule 41 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 70

    (42) expr -> expr - expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 42 (expr -> expr - expr .)
    +               reduce using rule 42 (expr -> expr - expr .)
    -               reduce using rule 42 (expr -> expr - expr .)
    MPLUS           reduce using rule 42 (expr -> expr - expr .)
    MMINUS          reduce using rule 42 (expr -> expr - expr .)
    EQ              reduce using rule 42 (expr -> expr - expr .)
    NEQ             reduce using rule 42 (expr -> expr - expr .)
    GTEQ            reduce using rule 42 (expr -> expr - expr .)
    LTEQ            reduce using rule 42 (expr -> expr - expr .)
    >               reduce using rule 42 (expr -> expr - expr .)
    <               reduce using rule 42 (expr -> expr - expr .)
    )               reduce using rule 42 (expr -> expr - expr .)
    ]               reduce using rule 42 (expr -> expr - expr .)
    ,               reduce using rule 42 (expr -> expr - expr .)
    :               reduce using rule 42 (expr -> expr - expr .)
    RETURN          reduce using rule 42 (expr -> expr - expr .)
    PRINT           reduce using rule 42 (expr -> expr - expr .)
    BREAK           reduce using rule 42 (expr -> expr - expr .)
    CONTINUE        reduce using rule 42 (expr -> expr - expr .)
    {               reduce using rule 42 (expr -> expr - expr .)
    ID              reduce using rule 42 (expr -> expr - expr .)
    IF              reduce using rule 42 (expr -> expr - expr .)
    WHILE           reduce using rule 42 (expr -> expr - expr .)
    FOR             reduce using rule 42 (expr -> expr - expr .)
    '               shift and go to state 32
    *               shift and go to state 35
    /               shift and go to state 36
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 42 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 42 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 42 (expr -> expr - expr .) ]
  ! MMLTP           [ reduce using rule 42 (expr -> expr - expr .) ]
  ! MDIV            [ reduce using rule 42 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 71

    (43) expr -> expr * expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 43 (expr -> expr * expr .)
    +               reduce using rule 43 (expr -> expr * expr .)
    -               reduce using rule 43 (expr -> expr * expr .)
    *               reduce using rule 43 (expr -> expr * expr .)
    /               reduce using rule 43 (expr -> expr * expr .)
    MPLUS           reduce using rule 43 (expr -> expr * expr .)
    MMINUS          reduce using rule 43 (expr -> expr * expr .)
    MMLTP           reduce using rule 43 (expr -> expr * expr .)
    MDIV            reduce using rule 43 (expr -> expr * expr .)
    EQ              reduce using rule 43 (expr -> expr * expr .)
    NEQ             reduce using rule 43 (expr -> expr * expr .)
    GTEQ            reduce using rule 43 (expr -> expr * expr .)
    LTEQ            reduce using rule 43 (expr -> expr * expr .)
    >               reduce using rule 43 (expr -> expr * expr .)
    <               reduce using rule 43 (expr -> expr * expr .)
    )               reduce using rule 43 (expr -> expr * expr .)
    ]               reduce using rule 43 (expr -> expr * expr .)
    ,               reduce using rule 43 (expr -> expr * expr .)
    :               reduce using rule 43 (expr -> expr * expr .)
    RETURN          reduce using rule 43 (expr -> expr * expr .)
    PRINT           reduce using rule 43 (expr -> expr * expr .)
    BREAK           reduce using rule 43 (expr -> expr * expr .)
    CONTINUE        reduce using rule 43 (expr -> expr * expr .)
    {               reduce using rule 43 (expr -> expr * expr .)
    ID              reduce using rule 43 (expr -> expr * expr .)
    IF              reduce using rule 43 (expr -> expr * expr .)
    WHILE           reduce using rule 43 (expr -> expr * expr .)
    FOR             reduce using rule 43 (expr -> expr * expr .)
    '               shift and go to state 32

  ! '               [ reduce using rule 43 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! MMLTP           [ shift and go to state 39 ]
  ! MDIV            [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 72

    (44) expr -> expr / expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 44 (expr -> expr / expr .)
    +               reduce using rule 44 (expr -> expr / expr .)
    -               reduce using rule 44 (expr -> expr / expr .)
    *               reduce using rule 44 (expr -> expr / expr .)
    /               reduce using rule 44 (expr -> expr / expr .)
    MPLUS           reduce using rule 44 (expr -> expr / expr .)
    MMINUS          reduce using rule 44 (expr -> expr / expr .)
    MMLTP           reduce using rule 44 (expr -> expr / expr .)
    MDIV            reduce using rule 44 (expr -> expr / expr .)
    EQ              reduce using rule 44 (expr -> expr / expr .)
    NEQ             reduce using rule 44 (expr -> expr / expr .)
    GTEQ            reduce using rule 44 (expr -> expr / expr .)
    LTEQ            reduce using rule 44 (expr -> expr / expr .)
    >               reduce using rule 44 (expr -> expr / expr .)
    <               reduce using rule 44 (expr -> expr / expr .)
    )               reduce using rule 44 (expr -> expr / expr .)
    ]               reduce using rule 44 (expr -> expr / expr .)
    ,               reduce using rule 44 (expr -> expr / expr .)
    :               reduce using rule 44 (expr -> expr / expr .)
    RETURN          reduce using rule 44 (expr -> expr / expr .)
    PRINT           reduce using rule 44 (expr -> expr / expr .)
    BREAK           reduce using rule 44 (expr -> expr / expr .)
    CONTINUE        reduce using rule 44 (expr -> expr / expr .)
    {               reduce using rule 44 (expr -> expr / expr .)
    ID              reduce using rule 44 (expr -> expr / expr .)
    IF              reduce using rule 44 (expr -> expr / expr .)
    WHILE           reduce using rule 44 (expr -> expr / expr .)
    FOR             reduce using rule 44 (expr -> expr / expr .)
    '               shift and go to state 32

  ! '               [ reduce using rule 44 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! MMLTP           [ shift and go to state 39 ]
  ! MDIV            [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 73

    (45) expr -> expr MPLUS expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 45 (expr -> expr MPLUS expr .)
    +               reduce using rule 45 (expr -> expr MPLUS expr .)
    -               reduce using rule 45 (expr -> expr MPLUS expr .)
    MPLUS           reduce using rule 45 (expr -> expr MPLUS expr .)
    MMINUS          reduce using rule 45 (expr -> expr MPLUS expr .)
    EQ              reduce using rule 45 (expr -> expr MPLUS expr .)
    NEQ             reduce using rule 45 (expr -> expr MPLUS expr .)
    GTEQ            reduce using rule 45 (expr -> expr MPLUS expr .)
    LTEQ            reduce using rule 45 (expr -> expr MPLUS expr .)
    >               reduce using rule 45 (expr -> expr MPLUS expr .)
    <               reduce using rule 45 (expr -> expr MPLUS expr .)
    )               reduce using rule 45 (expr -> expr MPLUS expr .)
    ]               reduce using rule 45 (expr -> expr MPLUS expr .)
    ,               reduce using rule 45 (expr -> expr MPLUS expr .)
    :               reduce using rule 45 (expr -> expr MPLUS expr .)
    RETURN          reduce using rule 45 (expr -> expr MPLUS expr .)
    PRINT           reduce using rule 45 (expr -> expr MPLUS expr .)
    BREAK           reduce using rule 45 (expr -> expr MPLUS expr .)
    CONTINUE        reduce using rule 45 (expr -> expr MPLUS expr .)
    {               reduce using rule 45 (expr -> expr MPLUS expr .)
    ID              reduce using rule 45 (expr -> expr MPLUS expr .)
    IF              reduce using rule 45 (expr -> expr MPLUS expr .)
    WHILE           reduce using rule 45 (expr -> expr MPLUS expr .)
    FOR             reduce using rule 45 (expr -> expr MPLUS expr .)
    '               shift and go to state 32
    *               shift and go to state 35
    /               shift and go to state 36
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 45 (expr -> expr MPLUS expr .) ]
  ! *               [ reduce using rule 45 (expr -> expr MPLUS expr .) ]
  ! /               [ reduce using rule 45 (expr -> expr MPLUS expr .) ]
  ! MMLTP           [ reduce using rule 45 (expr -> expr MPLUS expr .) ]
  ! MDIV            [ reduce using rule 45 (expr -> expr MPLUS expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 74

    (46) expr -> expr MMINUS expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 46 (expr -> expr MMINUS expr .)
    +               reduce using rule 46 (expr -> expr MMINUS expr .)
    -               reduce using rule 46 (expr -> expr MMINUS expr .)
    MPLUS           reduce using rule 46 (expr -> expr MMINUS expr .)
    MMINUS          reduce using rule 46 (expr -> expr MMINUS expr .)
    EQ              reduce using rule 46 (expr -> expr MMINUS expr .)
    NEQ             reduce using rule 46 (expr -> expr MMINUS expr .)
    GTEQ            reduce using rule 46 (expr -> expr MMINUS expr .)
    LTEQ            reduce using rule 46 (expr -> expr MMINUS expr .)
    >               reduce using rule 46 (expr -> expr MMINUS expr .)
    <               reduce using rule 46 (expr -> expr MMINUS expr .)
    )               reduce using rule 46 (expr -> expr MMINUS expr .)
    ]               reduce using rule 46 (expr -> expr MMINUS expr .)
    ,               reduce using rule 46 (expr -> expr MMINUS expr .)
    :               reduce using rule 46 (expr -> expr MMINUS expr .)
    RETURN          reduce using rule 46 (expr -> expr MMINUS expr .)
    PRINT           reduce using rule 46 (expr -> expr MMINUS expr .)
    BREAK           reduce using rule 46 (expr -> expr MMINUS expr .)
    CONTINUE        reduce using rule 46 (expr -> expr MMINUS expr .)
    {               reduce using rule 46 (expr -> expr MMINUS expr .)
    ID              reduce using rule 46 (expr -> expr MMINUS expr .)
    IF              reduce using rule 46 (expr -> expr MMINUS expr .)
    WHILE           reduce using rule 46 (expr -> expr MMINUS expr .)
    FOR             reduce using rule 46 (expr -> expr MMINUS expr .)
    '               shift and go to state 32
    *               shift and go to state 35
    /               shift and go to state 36
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 46 (expr -> expr MMINUS expr .) ]
  ! *               [ reduce using rule 46 (expr -> expr MMINUS expr .) ]
  ! /               [ reduce using rule 46 (expr -> expr MMINUS expr .) ]
  ! MMLTP           [ reduce using rule 46 (expr -> expr MMINUS expr .) ]
  ! MDIV            [ reduce using rule 46 (expr -> expr MMINUS expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 75

    (47) expr -> expr MMLTP expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 47 (expr -> expr MMLTP expr .)
    +               reduce using rule 47 (expr -> expr MMLTP expr .)
    -               reduce using rule 47 (expr -> expr MMLTP expr .)
    *               reduce using rule 47 (expr -> expr MMLTP expr .)
    /               reduce using rule 47 (expr -> expr MMLTP expr .)
    MPLUS           reduce using rule 47 (expr -> expr MMLTP expr .)
    MMINUS          reduce using rule 47 (expr -> expr MMLTP expr .)
    MMLTP           reduce using rule 47 (expr -> expr MMLTP expr .)
    MDIV            reduce using rule 47 (expr -> expr MMLTP expr .)
    EQ              reduce using rule 47 (expr -> expr MMLTP expr .)
    NEQ             reduce using rule 47 (expr -> expr MMLTP expr .)
    GTEQ            reduce using rule 47 (expr -> expr MMLTP expr .)
    LTEQ            reduce using rule 47 (expr -> expr MMLTP expr .)
    >               reduce using rule 47 (expr -> expr MMLTP expr .)
    <               reduce using rule 47 (expr -> expr MMLTP expr .)
    )               reduce using rule 47 (expr -> expr MMLTP expr .)
    ]               reduce using rule 47 (expr -> expr MMLTP expr .)
    ,               reduce using rule 47 (expr -> expr MMLTP expr .)
    :               reduce using rule 47 (expr -> expr MMLTP expr .)
    RETURN          reduce using rule 47 (expr -> expr MMLTP expr .)
    PRINT           reduce using rule 47 (expr -> expr MMLTP expr .)
    BREAK           reduce using rule 47 (expr -> expr MMLTP expr .)
    CONTINUE        reduce using rule 47 (expr -> expr MMLTP expr .)
    {               reduce using rule 47 (expr -> expr MMLTP expr .)
    ID              reduce using rule 47 (expr -> expr MMLTP expr .)
    IF              reduce using rule 47 (expr -> expr MMLTP expr .)
    WHILE           reduce using rule 47 (expr -> expr MMLTP expr .)
    FOR             reduce using rule 47 (expr -> expr MMLTP expr .)
    '               shift and go to state 32

  ! '               [ reduce using rule 47 (expr -> expr MMLTP expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! MMLTP           [ shift and go to state 39 ]
  ! MDIV            [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 76

    (48) expr -> expr MDIV expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 48 (expr -> expr MDIV expr .)
    +               reduce using rule 48 (expr -> expr MDIV expr .)
    -               reduce using rule 48 (expr -> expr MDIV expr .)
    *               reduce using rule 48 (expr -> expr MDIV expr .)
    /               reduce using rule 48 (expr -> expr MDIV expr .)
    MPLUS           reduce using rule 48 (expr -> expr MDIV expr .)
    MMINUS          reduce using rule 48 (expr -> expr MDIV expr .)
    MMLTP           reduce using rule 48 (expr -> expr MDIV expr .)
    MDIV            reduce using rule 48 (expr -> expr MDIV expr .)
    EQ              reduce using rule 48 (expr -> expr MDIV expr .)
    NEQ             reduce using rule 48 (expr -> expr MDIV expr .)
    GTEQ            reduce using rule 48 (expr -> expr MDIV expr .)
    LTEQ            reduce using rule 48 (expr -> expr MDIV expr .)
    >               reduce using rule 48 (expr -> expr MDIV expr .)
    <               reduce using rule 48 (expr -> expr MDIV expr .)
    )               reduce using rule 48 (expr -> expr MDIV expr .)
    ]               reduce using rule 48 (expr -> expr MDIV expr .)
    ,               reduce using rule 48 (expr -> expr MDIV expr .)
    :               reduce using rule 48 (expr -> expr MDIV expr .)
    RETURN          reduce using rule 48 (expr -> expr MDIV expr .)
    PRINT           reduce using rule 48 (expr -> expr MDIV expr .)
    BREAK           reduce using rule 48 (expr -> expr MDIV expr .)
    CONTINUE        reduce using rule 48 (expr -> expr MDIV expr .)
    {               reduce using rule 48 (expr -> expr MDIV expr .)
    ID              reduce using rule 48 (expr -> expr MDIV expr .)
    IF              reduce using rule 48 (expr -> expr MDIV expr .)
    WHILE           reduce using rule 48 (expr -> expr MDIV expr .)
    FOR             reduce using rule 48 (expr -> expr MDIV expr .)
    '               shift and go to state 32

  ! '               [ reduce using rule 48 (expr -> expr MDIV expr .) ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]
  ! MPLUS           [ shift and go to state 37 ]
  ! MMINUS          [ shift and go to state 38 ]
  ! MMLTP           [ shift and go to state 39 ]
  ! MDIV            [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 77

    (49) expr -> expr EQ expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 49 (expr -> expr EQ expr .)
    EQ              reduce using rule 49 (expr -> expr EQ expr .)
    NEQ             reduce using rule 49 (expr -> expr EQ expr .)
    GTEQ            reduce using rule 49 (expr -> expr EQ expr .)
    LTEQ            reduce using rule 49 (expr -> expr EQ expr .)
    >               reduce using rule 49 (expr -> expr EQ expr .)
    <               reduce using rule 49 (expr -> expr EQ expr .)
    )               reduce using rule 49 (expr -> expr EQ expr .)
    ]               reduce using rule 49 (expr -> expr EQ expr .)
    ,               reduce using rule 49 (expr -> expr EQ expr .)
    :               reduce using rule 49 (expr -> expr EQ expr .)
    RETURN          reduce using rule 49 (expr -> expr EQ expr .)
    PRINT           reduce using rule 49 (expr -> expr EQ expr .)
    BREAK           reduce using rule 49 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 49 (expr -> expr EQ expr .)
    {               reduce using rule 49 (expr -> expr EQ expr .)
    ID              reduce using rule 49 (expr -> expr EQ expr .)
    IF              reduce using rule 49 (expr -> expr EQ expr .)
    WHILE           reduce using rule 49 (expr -> expr EQ expr .)
    FOR             reduce using rule 49 (expr -> expr EQ expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! MPLUS           [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! MMINUS          [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! MMLTP           [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! MDIV            [ reduce using rule 49 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 78

    (50) expr -> expr NEQ expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 50 (expr -> expr NEQ expr .)
    EQ              reduce using rule 50 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 50 (expr -> expr NEQ expr .)
    GTEQ            reduce using rule 50 (expr -> expr NEQ expr .)
    LTEQ            reduce using rule 50 (expr -> expr NEQ expr .)
    >               reduce using rule 50 (expr -> expr NEQ expr .)
    <               reduce using rule 50 (expr -> expr NEQ expr .)
    )               reduce using rule 50 (expr -> expr NEQ expr .)
    ]               reduce using rule 50 (expr -> expr NEQ expr .)
    ,               reduce using rule 50 (expr -> expr NEQ expr .)
    :               reduce using rule 50 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 50 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 50 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 50 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 50 (expr -> expr NEQ expr .)
    {               reduce using rule 50 (expr -> expr NEQ expr .)
    ID              reduce using rule 50 (expr -> expr NEQ expr .)
    IF              reduce using rule 50 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 50 (expr -> expr NEQ expr .)
    FOR             reduce using rule 50 (expr -> expr NEQ expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! +               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! MPLUS           [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! MMINUS          [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! MMLTP           [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! MDIV            [ reduce using rule 50 (expr -> expr NEQ expr .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 79

    (51) expr -> expr GTEQ expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 51 (expr -> expr GTEQ expr .)
    EQ              reduce using rule 51 (expr -> expr GTEQ expr .)
    NEQ             reduce using rule 51 (expr -> expr GTEQ expr .)
    GTEQ            reduce using rule 51 (expr -> expr GTEQ expr .)
    LTEQ            reduce using rule 51 (expr -> expr GTEQ expr .)
    >               reduce using rule 51 (expr -> expr GTEQ expr .)
    <               reduce using rule 51 (expr -> expr GTEQ expr .)
    )               reduce using rule 51 (expr -> expr GTEQ expr .)
    ]               reduce using rule 51 (expr -> expr GTEQ expr .)
    ,               reduce using rule 51 (expr -> expr GTEQ expr .)
    :               reduce using rule 51 (expr -> expr GTEQ expr .)
    RETURN          reduce using rule 51 (expr -> expr GTEQ expr .)
    PRINT           reduce using rule 51 (expr -> expr GTEQ expr .)
    BREAK           reduce using rule 51 (expr -> expr GTEQ expr .)
    CONTINUE        reduce using rule 51 (expr -> expr GTEQ expr .)
    {               reduce using rule 51 (expr -> expr GTEQ expr .)
    ID              reduce using rule 51 (expr -> expr GTEQ expr .)
    IF              reduce using rule 51 (expr -> expr GTEQ expr .)
    WHILE           reduce using rule 51 (expr -> expr GTEQ expr .)
    FOR             reduce using rule 51 (expr -> expr GTEQ expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! +               [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! -               [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! *               [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! /               [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! MPLUS           [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! MMINUS          [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! MMLTP           [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! MDIV            [ reduce using rule 51 (expr -> expr GTEQ expr .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 80

    (52) expr -> expr LTEQ expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 52 (expr -> expr LTEQ expr .)
    EQ              reduce using rule 52 (expr -> expr LTEQ expr .)
    NEQ             reduce using rule 52 (expr -> expr LTEQ expr .)
    GTEQ            reduce using rule 52 (expr -> expr LTEQ expr .)
    LTEQ            reduce using rule 52 (expr -> expr LTEQ expr .)
    >               reduce using rule 52 (expr -> expr LTEQ expr .)
    <               reduce using rule 52 (expr -> expr LTEQ expr .)
    )               reduce using rule 52 (expr -> expr LTEQ expr .)
    ]               reduce using rule 52 (expr -> expr LTEQ expr .)
    ,               reduce using rule 52 (expr -> expr LTEQ expr .)
    :               reduce using rule 52 (expr -> expr LTEQ expr .)
    RETURN          reduce using rule 52 (expr -> expr LTEQ expr .)
    PRINT           reduce using rule 52 (expr -> expr LTEQ expr .)
    BREAK           reduce using rule 52 (expr -> expr LTEQ expr .)
    CONTINUE        reduce using rule 52 (expr -> expr LTEQ expr .)
    {               reduce using rule 52 (expr -> expr LTEQ expr .)
    ID              reduce using rule 52 (expr -> expr LTEQ expr .)
    IF              reduce using rule 52 (expr -> expr LTEQ expr .)
    WHILE           reduce using rule 52 (expr -> expr LTEQ expr .)
    FOR             reduce using rule 52 (expr -> expr LTEQ expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! +               [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! -               [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! *               [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! /               [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! MPLUS           [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! MMINUS          [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! MMLTP           [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! MDIV            [ reduce using rule 52 (expr -> expr LTEQ expr .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 81

    (53) expr -> expr > expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 53 (expr -> expr > expr .)
    EQ              reduce using rule 53 (expr -> expr > expr .)
    NEQ             reduce using rule 53 (expr -> expr > expr .)
    GTEQ            reduce using rule 53 (expr -> expr > expr .)
    LTEQ            reduce using rule 53 (expr -> expr > expr .)
    >               reduce using rule 53 (expr -> expr > expr .)
    <               reduce using rule 53 (expr -> expr > expr .)
    )               reduce using rule 53 (expr -> expr > expr .)
    ]               reduce using rule 53 (expr -> expr > expr .)
    ,               reduce using rule 53 (expr -> expr > expr .)
    :               reduce using rule 53 (expr -> expr > expr .)
    RETURN          reduce using rule 53 (expr -> expr > expr .)
    PRINT           reduce using rule 53 (expr -> expr > expr .)
    BREAK           reduce using rule 53 (expr -> expr > expr .)
    CONTINUE        reduce using rule 53 (expr -> expr > expr .)
    {               reduce using rule 53 (expr -> expr > expr .)
    ID              reduce using rule 53 (expr -> expr > expr .)
    IF              reduce using rule 53 (expr -> expr > expr .)
    WHILE           reduce using rule 53 (expr -> expr > expr .)
    FOR             reduce using rule 53 (expr -> expr > expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! MPLUS           [ reduce using rule 53 (expr -> expr > expr .) ]
  ! MMINUS          [ reduce using rule 53 (expr -> expr > expr .) ]
  ! MMLTP           [ reduce using rule 53 (expr -> expr > expr .) ]
  ! MDIV            [ reduce using rule 53 (expr -> expr > expr .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 82

    (54) expr -> expr < expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 54 (expr -> expr < expr .)
    EQ              reduce using rule 54 (expr -> expr < expr .)
    NEQ             reduce using rule 54 (expr -> expr < expr .)
    GTEQ            reduce using rule 54 (expr -> expr < expr .)
    LTEQ            reduce using rule 54 (expr -> expr < expr .)
    >               reduce using rule 54 (expr -> expr < expr .)
    <               reduce using rule 54 (expr -> expr < expr .)
    )               reduce using rule 54 (expr -> expr < expr .)
    ]               reduce using rule 54 (expr -> expr < expr .)
    ,               reduce using rule 54 (expr -> expr < expr .)
    :               reduce using rule 54 (expr -> expr < expr .)
    RETURN          reduce using rule 54 (expr -> expr < expr .)
    PRINT           reduce using rule 54 (expr -> expr < expr .)
    BREAK           reduce using rule 54 (expr -> expr < expr .)
    CONTINUE        reduce using rule 54 (expr -> expr < expr .)
    {               reduce using rule 54 (expr -> expr < expr .)
    ID              reduce using rule 54 (expr -> expr < expr .)
    IF              reduce using rule 54 (expr -> expr < expr .)
    WHILE           reduce using rule 54 (expr -> expr < expr .)
    FOR             reduce using rule 54 (expr -> expr < expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40

  ! '               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! MPLUS           [ reduce using rule 54 (expr -> expr < expr .) ]
  ! MMINUS          [ reduce using rule 54 (expr -> expr < expr .) ]
  ! MMLTP           [ reduce using rule 54 (expr -> expr < expr .) ]
  ! MDIV            [ reduce using rule 54 (expr -> expr < expr .) ]
  ! EQ              [ shift and go to state 41 ]
  ! NEQ             [ shift and go to state 42 ]
  ! GTEQ            [ shift and go to state 43 ]
  ! LTEQ            [ shift and go to state 44 ]
  ! >               [ shift and go to state 45 ]
  ! <               [ shift and go to state 46 ]


state 83

    (17) expr -> ZEROS ( expr . )
    (18) expr -> ZEROS ( expr . , expr )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 102
    ,               shift and go to state 103
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 84

    (24) expr -> ( expr ) .

    ;               reduce using rule 24 (expr -> ( expr ) .)
    '               reduce using rule 24 (expr -> ( expr ) .)
    +               reduce using rule 24 (expr -> ( expr ) .)
    -               reduce using rule 24 (expr -> ( expr ) .)
    *               reduce using rule 24 (expr -> ( expr ) .)
    /               reduce using rule 24 (expr -> ( expr ) .)
    MPLUS           reduce using rule 24 (expr -> ( expr ) .)
    MMINUS          reduce using rule 24 (expr -> ( expr ) .)
    MMLTP           reduce using rule 24 (expr -> ( expr ) .)
    MDIV            reduce using rule 24 (expr -> ( expr ) .)
    EQ              reduce using rule 24 (expr -> ( expr ) .)
    NEQ             reduce using rule 24 (expr -> ( expr ) .)
    GTEQ            reduce using rule 24 (expr -> ( expr ) .)
    LTEQ            reduce using rule 24 (expr -> ( expr ) .)
    >               reduce using rule 24 (expr -> ( expr ) .)
    <               reduce using rule 24 (expr -> ( expr ) .)
    )               reduce using rule 24 (expr -> ( expr ) .)
    ]               reduce using rule 24 (expr -> ( expr ) .)
    ,               reduce using rule 24 (expr -> ( expr ) .)
    :               reduce using rule 24 (expr -> ( expr ) .)
    RETURN          reduce using rule 24 (expr -> ( expr ) .)
    PRINT           reduce using rule 24 (expr -> ( expr ) .)
    BREAK           reduce using rule 24 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 24 (expr -> ( expr ) .)
    {               reduce using rule 24 (expr -> ( expr ) .)
    ID              reduce using rule 24 (expr -> ( expr ) .)
    IF              reduce using rule 24 (expr -> ( expr ) .)
    WHILE           reduce using rule 24 (expr -> ( expr ) .)
    FOR             reduce using rule 24 (expr -> ( expr ) .)


state 85

    (19) expr -> ONES ( expr . )
    (20) expr -> ONES ( expr . , expr )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 104
    ,               shift and go to state 105
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 86

    (21) expr -> EYE ( expr . )
    (22) expr -> EYE ( expr . , expr )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 106
    ,               shift and go to state 107
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 87

    (35) assignment -> lvalue = expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 35 (assignment -> lvalue = expr .)
    )               reduce using rule 35 (assignment -> lvalue = expr .)
    ]               reduce using rule 35 (assignment -> lvalue = expr .)
    ,               reduce using rule 35 (assignment -> lvalue = expr .)
    :               reduce using rule 35 (assignment -> lvalue = expr .)
    RETURN          reduce using rule 35 (assignment -> lvalue = expr .)
    PRINT           reduce using rule 35 (assignment -> lvalue = expr .)
    BREAK           reduce using rule 35 (assignment -> lvalue = expr .)
    CONTINUE        reduce using rule 35 (assignment -> lvalue = expr .)
    {               reduce using rule 35 (assignment -> lvalue = expr .)
    ID              reduce using rule 35 (assignment -> lvalue = expr .)
    IF              reduce using rule 35 (assignment -> lvalue = expr .)
    WHILE           reduce using rule 35 (assignment -> lvalue = expr .)
    FOR             reduce using rule 35 (assignment -> lvalue = expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46

  ! '               [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! +               [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! -               [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! *               [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! /               [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! MPLUS           [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! MMINUS          [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! MMLTP           [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! MDIV            [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! EQ              [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! NEQ             [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! GTEQ            [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! LTEQ            [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! >               [ reduce using rule 35 (assignment -> lvalue = expr .) ]
  ! <               [ reduce using rule 35 (assignment -> lvalue = expr .) ]


state 88

    (36) assignment -> lvalue PLUSASSIGN expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    )               reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    ]               reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    ,               reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    :               reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    RETURN          reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    PRINT           reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    BREAK           reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    CONTINUE        reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    {               reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    ID              reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    IF              reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    WHILE           reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    FOR             reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46

  ! '               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! +               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! -               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! *               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! /               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! MDIV            [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! EQ              [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! NEQ             [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! GTEQ            [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! LTEQ            [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! >               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]
  ! <               [ reduce using rule 36 (assignment -> lvalue PLUSASSIGN expr .) ]


state 89

    (37) assignment -> lvalue MINASSIGN expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    )               reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    ]               reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    ,               reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    :               reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    RETURN          reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    PRINT           reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    BREAK           reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    CONTINUE        reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    {               reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    ID              reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    IF              reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    WHILE           reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    FOR             reduce using rule 37 (assignment -> lvalue MINASSIGN expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46

  ! '               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! +               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! -               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! *               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! /               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! MDIV            [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! EQ              [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! NEQ             [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! GTEQ            [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! LTEQ            [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! >               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]
  ! <               [ reduce using rule 37 (assignment -> lvalue MINASSIGN expr .) ]


state 90

    (38) assignment -> lvalue MULTASSIGN expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    )               reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    ]               reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    ,               reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    :               reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    RETURN          reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    PRINT           reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    BREAK           reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    CONTINUE        reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    {               reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    ID              reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    IF              reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    WHILE           reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    FOR             reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46

  ! '               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! +               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! -               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! *               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! /               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! MDIV            [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! EQ              [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! NEQ             [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! GTEQ            [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! LTEQ            [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! >               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]
  ! <               [ reduce using rule 38 (assignment -> lvalue MULTASSIGN expr .) ]


state 91

    (39) assignment -> lvalue DIVASSIGN expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ;               reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    )               reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    ]               reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    ,               reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    :               reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    RETURN          reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    PRINT           reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    BREAK           reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    CONTINUE        reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    {               reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    ID              reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    IF              reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    WHILE           reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    FOR             reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46

  ! '               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! +               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! -               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! *               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! /               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! MPLUS           [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! MMINUS          [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! MMLTP           [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! MDIV            [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! EQ              [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! NEQ             [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! GTEQ            [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! LTEQ            [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! >               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]
  ! <               [ reduce using rule 39 (assignment -> lvalue DIVASSIGN expr .) ]


state 92

    (30) expr -> [ array_interior ] .

    ;               reduce using rule 30 (expr -> [ array_interior ] .)
    '               reduce using rule 30 (expr -> [ array_interior ] .)
    +               reduce using rule 30 (expr -> [ array_interior ] .)
    -               reduce using rule 30 (expr -> [ array_interior ] .)
    *               reduce using rule 30 (expr -> [ array_interior ] .)
    /               reduce using rule 30 (expr -> [ array_interior ] .)
    MPLUS           reduce using rule 30 (expr -> [ array_interior ] .)
    MMINUS          reduce using rule 30 (expr -> [ array_interior ] .)
    MMLTP           reduce using rule 30 (expr -> [ array_interior ] .)
    MDIV            reduce using rule 30 (expr -> [ array_interior ] .)
    EQ              reduce using rule 30 (expr -> [ array_interior ] .)
    NEQ             reduce using rule 30 (expr -> [ array_interior ] .)
    GTEQ            reduce using rule 30 (expr -> [ array_interior ] .)
    LTEQ            reduce using rule 30 (expr -> [ array_interior ] .)
    >               reduce using rule 30 (expr -> [ array_interior ] .)
    <               reduce using rule 30 (expr -> [ array_interior ] .)
    )               reduce using rule 30 (expr -> [ array_interior ] .)
    ]               reduce using rule 30 (expr -> [ array_interior ] .)
    ,               reduce using rule 30 (expr -> [ array_interior ] .)
    :               reduce using rule 30 (expr -> [ array_interior ] .)
    RETURN          reduce using rule 30 (expr -> [ array_interior ] .)
    PRINT           reduce using rule 30 (expr -> [ array_interior ] .)
    BREAK           reduce using rule 30 (expr -> [ array_interior ] .)
    CONTINUE        reduce using rule 30 (expr -> [ array_interior ] .)
    {               reduce using rule 30 (expr -> [ array_interior ] .)
    ID              reduce using rule 30 (expr -> [ array_interior ] .)
    IF              reduce using rule 30 (expr -> [ array_interior ] .)
    WHILE           reduce using rule 30 (expr -> [ array_interior ] .)
    FOR             reduce using rule 30 (expr -> [ array_interior ] .)


state 93

    (27) array_interior -> array_interior , . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 108
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 94

    (3) block -> { block_interior } .

    INTNUM          reduce using rule 3 (block -> { block_interior } .)
    FLOATNUM        reduce using rule 3 (block -> { block_interior } .)
    STRING          reduce using rule 3 (block -> { block_interior } .)
    ZEROS           reduce using rule 3 (block -> { block_interior } .)
    ONES            reduce using rule 3 (block -> { block_interior } .)
    EYE             reduce using rule 3 (block -> { block_interior } .)
    (               reduce using rule 3 (block -> { block_interior } .)
    -               reduce using rule 3 (block -> { block_interior } .)
    [               reduce using rule 3 (block -> { block_interior } .)
    RETURN          reduce using rule 3 (block -> { block_interior } .)
    PRINT           reduce using rule 3 (block -> { block_interior } .)
    BREAK           reduce using rule 3 (block -> { block_interior } .)
    CONTINUE        reduce using rule 3 (block -> { block_interior } .)
    {               reduce using rule 3 (block -> { block_interior } .)
    ID              reduce using rule 3 (block -> { block_interior } .)
    IF              reduce using rule 3 (block -> { block_interior } .)
    WHILE           reduce using rule 3 (block -> { block_interior } .)
    FOR             reduce using rule 3 (block -> { block_interior } .)
    $end            reduce using rule 3 (block -> { block_interior } .)
    }               reduce using rule 3 (block -> { block_interior } .)
    ELSE            reduce using rule 3 (block -> { block_interior } .)


state 95

    (13) block_interior -> block_interior struct .

    }               reduce using rule 13 (block_interior -> block_interior struct .)
    INTNUM          reduce using rule 13 (block_interior -> block_interior struct .)
    FLOATNUM        reduce using rule 13 (block_interior -> block_interior struct .)
    STRING          reduce using rule 13 (block_interior -> block_interior struct .)
    ZEROS           reduce using rule 13 (block_interior -> block_interior struct .)
    ONES            reduce using rule 13 (block_interior -> block_interior struct .)
    EYE             reduce using rule 13 (block_interior -> block_interior struct .)
    (               reduce using rule 13 (block_interior -> block_interior struct .)
    -               reduce using rule 13 (block_interior -> block_interior struct .)
    [               reduce using rule 13 (block_interior -> block_interior struct .)
    RETURN          reduce using rule 13 (block_interior -> block_interior struct .)
    PRINT           reduce using rule 13 (block_interior -> block_interior struct .)
    BREAK           reduce using rule 13 (block_interior -> block_interior struct .)
    CONTINUE        reduce using rule 13 (block_interior -> block_interior struct .)
    {               reduce using rule 13 (block_interior -> block_interior struct .)
    ID              reduce using rule 13 (block_interior -> block_interior struct .)
    IF              reduce using rule 13 (block_interior -> block_interior struct .)
    WHILE           reduce using rule 13 (block_interior -> block_interior struct .)
    FOR             reduce using rule 13 (block_interior -> block_interior struct .)


state 96

    (33) lvalue -> ID [ array_interior . ]
    (27) array_interior -> array_interior . , expr

    ]               shift and go to state 109
    ,               shift and go to state 93


state 97

    (34) lvalue -> ID [ range . ]

    ]               shift and go to state 110


state 98

    (28) array_interior -> expr .
    (29) range -> expr . : expr
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ]               reduce using rule 28 (array_interior -> expr .)
    ,               reduce using rule 28 (array_interior -> expr .)
    :               shift and go to state 111
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 99

    (58) cond_if -> IF ( expr . ) struct
    (59) cond_if -> IF ( expr . ) struct ELSE struct
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 112
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 100

    (60) cond_while -> WHILE ( expr . ) struct
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 113
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 101

    (61) cond_for -> FOR lvalue = . range for_struct
    (29) range -> . expr : expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    lvalue                         shift and go to state 14
    range                          shift and go to state 114
    expr                           shift and go to state 115
    assignment                     shift and go to state 17

state 102

    (17) expr -> ZEROS ( expr ) .

    ;               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    '               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    +               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    -               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    *               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    /               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    MPLUS           reduce using rule 17 (expr -> ZEROS ( expr ) .)
    MMINUS          reduce using rule 17 (expr -> ZEROS ( expr ) .)
    MMLTP           reduce using rule 17 (expr -> ZEROS ( expr ) .)
    MDIV            reduce using rule 17 (expr -> ZEROS ( expr ) .)
    EQ              reduce using rule 17 (expr -> ZEROS ( expr ) .)
    NEQ             reduce using rule 17 (expr -> ZEROS ( expr ) .)
    GTEQ            reduce using rule 17 (expr -> ZEROS ( expr ) .)
    LTEQ            reduce using rule 17 (expr -> ZEROS ( expr ) .)
    >               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    <               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    )               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    ]               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    ,               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    :               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    RETURN          reduce using rule 17 (expr -> ZEROS ( expr ) .)
    PRINT           reduce using rule 17 (expr -> ZEROS ( expr ) .)
    BREAK           reduce using rule 17 (expr -> ZEROS ( expr ) .)
    CONTINUE        reduce using rule 17 (expr -> ZEROS ( expr ) .)
    {               reduce using rule 17 (expr -> ZEROS ( expr ) .)
    ID              reduce using rule 17 (expr -> ZEROS ( expr ) .)
    IF              reduce using rule 17 (expr -> ZEROS ( expr ) .)
    WHILE           reduce using rule 17 (expr -> ZEROS ( expr ) .)
    FOR             reduce using rule 17 (expr -> ZEROS ( expr ) .)


state 103

    (18) expr -> ZEROS ( expr , . expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 116
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 104

    (19) expr -> ONES ( expr ) .

    ;               reduce using rule 19 (expr -> ONES ( expr ) .)
    '               reduce using rule 19 (expr -> ONES ( expr ) .)
    +               reduce using rule 19 (expr -> ONES ( expr ) .)
    -               reduce using rule 19 (expr -> ONES ( expr ) .)
    *               reduce using rule 19 (expr -> ONES ( expr ) .)
    /               reduce using rule 19 (expr -> ONES ( expr ) .)
    MPLUS           reduce using rule 19 (expr -> ONES ( expr ) .)
    MMINUS          reduce using rule 19 (expr -> ONES ( expr ) .)
    MMLTP           reduce using rule 19 (expr -> ONES ( expr ) .)
    MDIV            reduce using rule 19 (expr -> ONES ( expr ) .)
    EQ              reduce using rule 19 (expr -> ONES ( expr ) .)
    NEQ             reduce using rule 19 (expr -> ONES ( expr ) .)
    GTEQ            reduce using rule 19 (expr -> ONES ( expr ) .)
    LTEQ            reduce using rule 19 (expr -> ONES ( expr ) .)
    >               reduce using rule 19 (expr -> ONES ( expr ) .)
    <               reduce using rule 19 (expr -> ONES ( expr ) .)
    )               reduce using rule 19 (expr -> ONES ( expr ) .)
    ]               reduce using rule 19 (expr -> ONES ( expr ) .)
    ,               reduce using rule 19 (expr -> ONES ( expr ) .)
    :               reduce using rule 19 (expr -> ONES ( expr ) .)
    RETURN          reduce using rule 19 (expr -> ONES ( expr ) .)
    PRINT           reduce using rule 19 (expr -> ONES ( expr ) .)
    BREAK           reduce using rule 19 (expr -> ONES ( expr ) .)
    CONTINUE        reduce using rule 19 (expr -> ONES ( expr ) .)
    {               reduce using rule 19 (expr -> ONES ( expr ) .)
    ID              reduce using rule 19 (expr -> ONES ( expr ) .)
    IF              reduce using rule 19 (expr -> ONES ( expr ) .)
    WHILE           reduce using rule 19 (expr -> ONES ( expr ) .)
    FOR             reduce using rule 19 (expr -> ONES ( expr ) .)


state 105

    (20) expr -> ONES ( expr , . expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 117
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 106

    (21) expr -> EYE ( expr ) .

    ;               reduce using rule 21 (expr -> EYE ( expr ) .)
    '               reduce using rule 21 (expr -> EYE ( expr ) .)
    +               reduce using rule 21 (expr -> EYE ( expr ) .)
    -               reduce using rule 21 (expr -> EYE ( expr ) .)
    *               reduce using rule 21 (expr -> EYE ( expr ) .)
    /               reduce using rule 21 (expr -> EYE ( expr ) .)
    MPLUS           reduce using rule 21 (expr -> EYE ( expr ) .)
    MMINUS          reduce using rule 21 (expr -> EYE ( expr ) .)
    MMLTP           reduce using rule 21 (expr -> EYE ( expr ) .)
    MDIV            reduce using rule 21 (expr -> EYE ( expr ) .)
    EQ              reduce using rule 21 (expr -> EYE ( expr ) .)
    NEQ             reduce using rule 21 (expr -> EYE ( expr ) .)
    GTEQ            reduce using rule 21 (expr -> EYE ( expr ) .)
    LTEQ            reduce using rule 21 (expr -> EYE ( expr ) .)
    >               reduce using rule 21 (expr -> EYE ( expr ) .)
    <               reduce using rule 21 (expr -> EYE ( expr ) .)
    )               reduce using rule 21 (expr -> EYE ( expr ) .)
    ]               reduce using rule 21 (expr -> EYE ( expr ) .)
    ,               reduce using rule 21 (expr -> EYE ( expr ) .)
    :               reduce using rule 21 (expr -> EYE ( expr ) .)
    RETURN          reduce using rule 21 (expr -> EYE ( expr ) .)
    PRINT           reduce using rule 21 (expr -> EYE ( expr ) .)
    BREAK           reduce using rule 21 (expr -> EYE ( expr ) .)
    CONTINUE        reduce using rule 21 (expr -> EYE ( expr ) .)
    {               reduce using rule 21 (expr -> EYE ( expr ) .)
    ID              reduce using rule 21 (expr -> EYE ( expr ) .)
    IF              reduce using rule 21 (expr -> EYE ( expr ) .)
    WHILE           reduce using rule 21 (expr -> EYE ( expr ) .)
    FOR             reduce using rule 21 (expr -> EYE ( expr ) .)


state 107

    (22) expr -> EYE ( expr , . expr )
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 118
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 108

    (27) array_interior -> array_interior , expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ]               reduce using rule 27 (array_interior -> array_interior , expr .)
    ,               reduce using rule 27 (array_interior -> array_interior , expr .)
    ;               reduce using rule 27 (array_interior -> array_interior , expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 109

    (33) lvalue -> ID [ array_interior ] .

    =               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    PLUSASSIGN      reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    MINASSIGN       reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    MULTASSIGN      reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    DIVASSIGN       reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    ;               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    '               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    +               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    -               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    *               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    /               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    MPLUS           reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    MMINUS          reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    MMLTP           reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    MDIV            reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    EQ              reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    NEQ             reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    GTEQ            reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    LTEQ            reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    >               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    <               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    )               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    ]               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    ,               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    :               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    RETURN          reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    PRINT           reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    BREAK           reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    CONTINUE        reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    {               reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    ID              reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    IF              reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    WHILE           reduce using rule 33 (lvalue -> ID [ array_interior ] .)
    FOR             reduce using rule 33 (lvalue -> ID [ array_interior ] .)


state 110

    (34) lvalue -> ID [ range ] .

    =               reduce using rule 34 (lvalue -> ID [ range ] .)
    PLUSASSIGN      reduce using rule 34 (lvalue -> ID [ range ] .)
    MINASSIGN       reduce using rule 34 (lvalue -> ID [ range ] .)
    MULTASSIGN      reduce using rule 34 (lvalue -> ID [ range ] .)
    DIVASSIGN       reduce using rule 34 (lvalue -> ID [ range ] .)
    ;               reduce using rule 34 (lvalue -> ID [ range ] .)
    '               reduce using rule 34 (lvalue -> ID [ range ] .)
    +               reduce using rule 34 (lvalue -> ID [ range ] .)
    -               reduce using rule 34 (lvalue -> ID [ range ] .)
    *               reduce using rule 34 (lvalue -> ID [ range ] .)
    /               reduce using rule 34 (lvalue -> ID [ range ] .)
    MPLUS           reduce using rule 34 (lvalue -> ID [ range ] .)
    MMINUS          reduce using rule 34 (lvalue -> ID [ range ] .)
    MMLTP           reduce using rule 34 (lvalue -> ID [ range ] .)
    MDIV            reduce using rule 34 (lvalue -> ID [ range ] .)
    EQ              reduce using rule 34 (lvalue -> ID [ range ] .)
    NEQ             reduce using rule 34 (lvalue -> ID [ range ] .)
    GTEQ            reduce using rule 34 (lvalue -> ID [ range ] .)
    LTEQ            reduce using rule 34 (lvalue -> ID [ range ] .)
    >               reduce using rule 34 (lvalue -> ID [ range ] .)
    <               reduce using rule 34 (lvalue -> ID [ range ] .)
    )               reduce using rule 34 (lvalue -> ID [ range ] .)
    ]               reduce using rule 34 (lvalue -> ID [ range ] .)
    ,               reduce using rule 34 (lvalue -> ID [ range ] .)
    :               reduce using rule 34 (lvalue -> ID [ range ] .)
    RETURN          reduce using rule 34 (lvalue -> ID [ range ] .)
    PRINT           reduce using rule 34 (lvalue -> ID [ range ] .)
    BREAK           reduce using rule 34 (lvalue -> ID [ range ] .)
    CONTINUE        reduce using rule 34 (lvalue -> ID [ range ] .)
    {               reduce using rule 34 (lvalue -> ID [ range ] .)
    ID              reduce using rule 34 (lvalue -> ID [ range ] .)
    IF              reduce using rule 34 (lvalue -> ID [ range ] .)
    WHILE           reduce using rule 34 (lvalue -> ID [ range ] .)
    FOR             reduce using rule 34 (lvalue -> ID [ range ] .)


state 111

    (29) range -> expr : . expr
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    ID              shift and go to state 26

    expr                           shift and go to state 119
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17

state 112

    (58) cond_if -> IF ( expr ) . struct
    (59) cond_if -> IF ( expr ) . struct ELSE struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    expr                           shift and go to state 3
    struct                         shift and go to state 120
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 113

    (60) cond_while -> WHILE ( expr ) . struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    expr                           shift and go to state 3
    struct                         shift and go to state 121
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 114

    (61) cond_for -> FOR lvalue = range . for_struct
    (8) for_struct -> . assignment ;
    (9) for_struct -> . instruction ;
    (10) for_struct -> . cond_expr
    (11) for_struct -> . block
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    lvalue                         shift and go to state 122
    for_struct                     shift and go to state 123
    assignment                     shift and go to state 124
    instruction                    shift and go to state 125
    cond_expr                      shift and go to state 126
    block                          shift and go to state 127
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 115

    (29) range -> expr . : expr
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    :               shift and go to state 111
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 116

    (18) expr -> ZEROS ( expr , expr . )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 128
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 117

    (20) expr -> ONES ( expr , expr . )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 129
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 118

    (22) expr -> EYE ( expr , expr . )
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    )               shift and go to state 130
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 119

    (29) range -> expr : expr .
    (26) expr -> expr . '
    (41) expr -> expr . + expr
    (42) expr -> expr . - expr
    (43) expr -> expr . * expr
    (44) expr -> expr . / expr
    (45) expr -> expr . MPLUS expr
    (46) expr -> expr . MMINUS expr
    (47) expr -> expr . MMLTP expr
    (48) expr -> expr . MDIV expr
    (49) expr -> expr . EQ expr
    (50) expr -> expr . NEQ expr
    (51) expr -> expr . GTEQ expr
    (52) expr -> expr . LTEQ expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr

    ]               reduce using rule 29 (range -> expr : expr .)
    RETURN          reduce using rule 29 (range -> expr : expr .)
    PRINT           reduce using rule 29 (range -> expr : expr .)
    BREAK           reduce using rule 29 (range -> expr : expr .)
    CONTINUE        reduce using rule 29 (range -> expr : expr .)
    {               reduce using rule 29 (range -> expr : expr .)
    ID              reduce using rule 29 (range -> expr : expr .)
    IF              reduce using rule 29 (range -> expr : expr .)
    WHILE           reduce using rule 29 (range -> expr : expr .)
    FOR             reduce using rule 29 (range -> expr : expr .)
    '               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36
    MPLUS           shift and go to state 37
    MMINUS          shift and go to state 38
    MMLTP           shift and go to state 39
    MDIV            shift and go to state 40
    EQ              shift and go to state 41
    NEQ             shift and go to state 42
    GTEQ            shift and go to state 43
    LTEQ            shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46


state 120

    (58) cond_if -> IF ( expr ) struct .
    (59) cond_if -> IF ( expr ) struct . ELSE struct

    INTNUM          reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    FLOATNUM        reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    STRING          reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    ZEROS           reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    ONES            reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    EYE             reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    (               reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    -               reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    [               reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    RETURN          reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    PRINT           reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    BREAK           reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    CONTINUE        reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    {               reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    ID              reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    IF              reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    WHILE           reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    FOR             reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    $end            reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    }               reduce using rule 58 (cond_if -> IF ( expr ) struct .)
    ELSE            shift and go to state 131

  ! ELSE            [ reduce using rule 58 (cond_if -> IF ( expr ) struct .) ]


state 121

    (60) cond_while -> WHILE ( expr ) struct .

    INTNUM          reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    FLOATNUM        reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    STRING          reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    ZEROS           reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    ONES            reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    EYE             reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    (               reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    -               reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    [               reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    RETURN          reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    PRINT           reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    BREAK           reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    CONTINUE        reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    {               reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    ID              reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    IF              reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    WHILE           reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    FOR             reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    $end            reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    }               reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)
    ELSE            reduce using rule 60 (cond_while -> WHILE ( expr ) struct .)


state 122

    (35) assignment -> lvalue . = expr
    (36) assignment -> lvalue . PLUSASSIGN expr
    (37) assignment -> lvalue . MINASSIGN expr
    (38) assignment -> lvalue . MULTASSIGN expr
    (39) assignment -> lvalue . DIVASSIGN expr

    =               shift and go to state 52
    PLUSASSIGN      shift and go to state 53
    MINASSIGN       shift and go to state 54
    MULTASSIGN      shift and go to state 55
    DIVASSIGN       shift and go to state 56


state 123

    (61) cond_for -> FOR lvalue = range for_struct .

    INTNUM          reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    FLOATNUM        reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    STRING          reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    ZEROS           reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    ONES            reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    EYE             reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    (               reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    -               reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    [               reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    RETURN          reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    PRINT           reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    BREAK           reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    CONTINUE        reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    {               reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    ID              reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    IF              reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    WHILE           reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    FOR             reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    $end            reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    }               reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)
    ELSE            reduce using rule 61 (cond_for -> FOR lvalue = range for_struct .)


state 124

    (8) for_struct -> assignment . ;

    ;               shift and go to state 132


state 125

    (9) for_struct -> instruction . ;

    ;               shift and go to state 133


state 126

    (10) for_struct -> cond_expr .

    ELSE            reduce using rule 10 (for_struct -> cond_expr .)
    INTNUM          reduce using rule 10 (for_struct -> cond_expr .)
    FLOATNUM        reduce using rule 10 (for_struct -> cond_expr .)
    STRING          reduce using rule 10 (for_struct -> cond_expr .)
    ZEROS           reduce using rule 10 (for_struct -> cond_expr .)
    ONES            reduce using rule 10 (for_struct -> cond_expr .)
    EYE             reduce using rule 10 (for_struct -> cond_expr .)
    (               reduce using rule 10 (for_struct -> cond_expr .)
    -               reduce using rule 10 (for_struct -> cond_expr .)
    [               reduce using rule 10 (for_struct -> cond_expr .)
    RETURN          reduce using rule 10 (for_struct -> cond_expr .)
    PRINT           reduce using rule 10 (for_struct -> cond_expr .)
    BREAK           reduce using rule 10 (for_struct -> cond_expr .)
    CONTINUE        reduce using rule 10 (for_struct -> cond_expr .)
    {               reduce using rule 10 (for_struct -> cond_expr .)
    ID              reduce using rule 10 (for_struct -> cond_expr .)
    IF              reduce using rule 10 (for_struct -> cond_expr .)
    WHILE           reduce using rule 10 (for_struct -> cond_expr .)
    FOR             reduce using rule 10 (for_struct -> cond_expr .)
    $end            reduce using rule 10 (for_struct -> cond_expr .)
    }               reduce using rule 10 (for_struct -> cond_expr .)


state 127

    (11) for_struct -> block .

    ELSE            reduce using rule 11 (for_struct -> block .)
    INTNUM          reduce using rule 11 (for_struct -> block .)
    FLOATNUM        reduce using rule 11 (for_struct -> block .)
    STRING          reduce using rule 11 (for_struct -> block .)
    ZEROS           reduce using rule 11 (for_struct -> block .)
    ONES            reduce using rule 11 (for_struct -> block .)
    EYE             reduce using rule 11 (for_struct -> block .)
    (               reduce using rule 11 (for_struct -> block .)
    -               reduce using rule 11 (for_struct -> block .)
    [               reduce using rule 11 (for_struct -> block .)
    RETURN          reduce using rule 11 (for_struct -> block .)
    PRINT           reduce using rule 11 (for_struct -> block .)
    BREAK           reduce using rule 11 (for_struct -> block .)
    CONTINUE        reduce using rule 11 (for_struct -> block .)
    {               reduce using rule 11 (for_struct -> block .)
    ID              reduce using rule 11 (for_struct -> block .)
    IF              reduce using rule 11 (for_struct -> block .)
    WHILE           reduce using rule 11 (for_struct -> block .)
    FOR             reduce using rule 11 (for_struct -> block .)
    $end            reduce using rule 11 (for_struct -> block .)
    }               reduce using rule 11 (for_struct -> block .)


state 128

    (18) expr -> ZEROS ( expr , expr ) .

    ;               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    '               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    +               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    -               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    *               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    /               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    MPLUS           reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    MMINUS          reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    MMLTP           reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    MDIV            reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    EQ              reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    NEQ             reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    GTEQ            reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    LTEQ            reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    >               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    <               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    )               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    ]               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    ,               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    :               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    RETURN          reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    PRINT           reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    BREAK           reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    CONTINUE        reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    {               reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    ID              reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    IF              reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    WHILE           reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)
    FOR             reduce using rule 18 (expr -> ZEROS ( expr , expr ) .)


state 129

    (20) expr -> ONES ( expr , expr ) .

    ;               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    '               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    +               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    -               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    *               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    /               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    MPLUS           reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    MMINUS          reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    MMLTP           reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    MDIV            reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    EQ              reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    NEQ             reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    GTEQ            reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    LTEQ            reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    >               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    <               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    )               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    ]               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    ,               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    :               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    RETURN          reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    PRINT           reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    BREAK           reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    CONTINUE        reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    {               reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    ID              reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    IF              reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    WHILE           reduce using rule 20 (expr -> ONES ( expr , expr ) .)
    FOR             reduce using rule 20 (expr -> ONES ( expr , expr ) .)


state 130

    (22) expr -> EYE ( expr , expr ) .

    ;               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    '               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    +               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    -               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    *               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    /               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    MPLUS           reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    MMINUS          reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    MMLTP           reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    MDIV            reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    EQ              reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    NEQ             reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    GTEQ            reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    LTEQ            reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    >               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    <               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    )               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    ]               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    ,               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    :               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    RETURN          reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    PRINT           reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    BREAK           reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    CONTINUE        reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    {               reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    ID              reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    IF              reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    WHILE           reduce using rule 22 (expr -> EYE ( expr , expr ) .)
    FOR             reduce using rule 22 (expr -> EYE ( expr , expr ) .)


state 131

    (59) cond_if -> IF ( expr ) struct ELSE . struct
    (4) struct -> . expr ;
    (5) struct -> . instruction ;
    (6) struct -> . cond_expr
    (7) struct -> . block
    (14) expr -> . INTNUM
    (15) expr -> . FLOATNUM
    (16) expr -> . STRING
    (17) expr -> . ZEROS ( expr )
    (18) expr -> . ZEROS ( expr , expr )
    (19) expr -> . ONES ( expr )
    (20) expr -> . ONES ( expr , expr )
    (21) expr -> . EYE ( expr )
    (22) expr -> . EYE ( expr , expr )
    (23) expr -> . lvalue
    (24) expr -> . ( expr )
    (25) expr -> . - expr
    (26) expr -> . expr '
    (30) expr -> . [ array_interior ]
    (31) expr -> . [ ]
    (40) expr -> . assignment
    (41) expr -> . expr + expr
    (42) expr -> . expr - expr
    (43) expr -> . expr * expr
    (44) expr -> . expr / expr
    (45) expr -> . expr MPLUS expr
    (46) expr -> . expr MMINUS expr
    (47) expr -> . expr MMLTP expr
    (48) expr -> . expr MDIV expr
    (49) expr -> . expr EQ expr
    (50) expr -> . expr NEQ expr
    (51) expr -> . expr GTEQ expr
    (52) expr -> . expr LTEQ expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (62) instruction -> . RETURN expr
    (63) instruction -> . PRINT array_interior
    (64) instruction -> . BREAK
    (65) instruction -> . CONTINUE
    (55) cond_expr -> . cond_if
    (56) cond_expr -> . cond_while
    (57) cond_expr -> . cond_for
    (3) block -> . { block_interior }
    (32) lvalue -> . ID
    (33) lvalue -> . ID [ array_interior ]
    (34) lvalue -> . ID [ range ]
    (35) assignment -> . lvalue = expr
    (36) assignment -> . lvalue PLUSASSIGN expr
    (37) assignment -> . lvalue MINASSIGN expr
    (38) assignment -> . lvalue MULTASSIGN expr
    (39) assignment -> . lvalue DIVASSIGN expr
    (58) cond_if -> . IF ( expr ) struct
    (59) cond_if -> . IF ( expr ) struct ELSE struct
    (60) cond_while -> . WHILE ( expr ) struct
    (61) cond_for -> . FOR lvalue = range for_struct

    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8
    STRING          shift and go to state 9
    ZEROS           shift and go to state 10
    ONES            shift and go to state 12
    EYE             shift and go to state 13
    (               shift and go to state 11
    -               shift and go to state 15
    [               shift and go to state 16
    RETURN          shift and go to state 18
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    {               shift and go to state 25
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29

    expr                           shift and go to state 3
    struct                         shift and go to state 134
    instruction                    shift and go to state 4
    cond_expr                      shift and go to state 5
    block                          shift and go to state 6
    lvalue                         shift and go to state 14
    assignment                     shift and go to state 17
    cond_if                        shift and go to state 22
    cond_while                     shift and go to state 23
    cond_for                       shift and go to state 24

state 132

    (8) for_struct -> assignment ; .

    ELSE            reduce using rule 8 (for_struct -> assignment ; .)
    INTNUM          reduce using rule 8 (for_struct -> assignment ; .)
    FLOATNUM        reduce using rule 8 (for_struct -> assignment ; .)
    STRING          reduce using rule 8 (for_struct -> assignment ; .)
    ZEROS           reduce using rule 8 (for_struct -> assignment ; .)
    ONES            reduce using rule 8 (for_struct -> assignment ; .)
    EYE             reduce using rule 8 (for_struct -> assignment ; .)
    (               reduce using rule 8 (for_struct -> assignment ; .)
    -               reduce using rule 8 (for_struct -> assignment ; .)
    [               reduce using rule 8 (for_struct -> assignment ; .)
    RETURN          reduce using rule 8 (for_struct -> assignment ; .)
    PRINT           reduce using rule 8 (for_struct -> assignment ; .)
    BREAK           reduce using rule 8 (for_struct -> assignment ; .)
    CONTINUE        reduce using rule 8 (for_struct -> assignment ; .)
    {               reduce using rule 8 (for_struct -> assignment ; .)
    ID              reduce using rule 8 (for_struct -> assignment ; .)
    IF              reduce using rule 8 (for_struct -> assignment ; .)
    WHILE           reduce using rule 8 (for_struct -> assignment ; .)
    FOR             reduce using rule 8 (for_struct -> assignment ; .)
    $end            reduce using rule 8 (for_struct -> assignment ; .)
    }               reduce using rule 8 (for_struct -> assignment ; .)


state 133

    (9) for_struct -> instruction ; .

    ELSE            reduce using rule 9 (for_struct -> instruction ; .)
    INTNUM          reduce using rule 9 (for_struct -> instruction ; .)
    FLOATNUM        reduce using rule 9 (for_struct -> instruction ; .)
    STRING          reduce using rule 9 (for_struct -> instruction ; .)
    ZEROS           reduce using rule 9 (for_struct -> instruction ; .)
    ONES            reduce using rule 9 (for_struct -> instruction ; .)
    EYE             reduce using rule 9 (for_struct -> instruction ; .)
    (               reduce using rule 9 (for_struct -> instruction ; .)
    -               reduce using rule 9 (for_struct -> instruction ; .)
    [               reduce using rule 9 (for_struct -> instruction ; .)
    RETURN          reduce using rule 9 (for_struct -> instruction ; .)
    PRINT           reduce using rule 9 (for_struct -> instruction ; .)
    BREAK           reduce using rule 9 (for_struct -> instruction ; .)
    CONTINUE        reduce using rule 9 (for_struct -> instruction ; .)
    {               reduce using rule 9 (for_struct -> instruction ; .)
    ID              reduce using rule 9 (for_struct -> instruction ; .)
    IF              reduce using rule 9 (for_struct -> instruction ; .)
    WHILE           reduce using rule 9 (for_struct -> instruction ; .)
    FOR             reduce using rule 9 (for_struct -> instruction ; .)
    $end            reduce using rule 9 (for_struct -> instruction ; .)
    }               reduce using rule 9 (for_struct -> instruction ; .)


state 134

    (59) cond_if -> IF ( expr ) struct ELSE struct .

    INTNUM          reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    FLOATNUM        reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    STRING          reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    ZEROS           reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    ONES            reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    EYE             reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    (               reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    -               reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    [               reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    RETURN          reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    PRINT           reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    BREAK           reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    CONTINUE        reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    {               reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    ID              reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    IF              reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    WHILE           reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    FOR             reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    $end            reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    }               reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)
    ELSE            reduce using rule 59 (cond_if -> IF ( expr ) struct ELSE struct .)

